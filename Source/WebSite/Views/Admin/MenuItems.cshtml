@*******************************************************************************************************
//  MenuItems.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/18/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using System.Text
@using openSPM.Models
@model AppModel
@{
    NameValueCollection parameters = Request.QueryString;
    int parentID = int.Parse(parameters["ID"]);

    ViewBag.CustomTitle = "Edit Menu Items for \"" + parameters["Name"] + "\" Page";
    ViewBag.Title = "Page Menu Item";
    ViewBag.PageHasMenu = false;
    ViewBag.PageControlScripts = new StringBuilder();

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "text", "Menu Text", "text-left" },
        new[] { "link", "URL", "text-left" },
        new[] { "sortOrder", "Sort&nbsp;Order", "text-center" },
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
}
@helper BodyRows()
{
    <td width="40%" class="text-left valign-middle" nowrap><img data-bind="attr: {src: deriveImageSource(image), title: imageAlt}">&nbsp;<button type="button" class="btn btn-link" data-bind="text: text, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><a data-bind="attr:{href: notNull(link)}" target="_blank"><div data-bind="text: $($element.parentElement.parentElement).truncateToWidth(link, 2)"></div></a></td>
    <td width="15%" class="text-center valign-middle" data-bind="text: sortOrder"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog()
{
    <div class="col-md-6">
        @Html.Raw(Model.DataContext.AddInputField<MenuItem>("text"))
        @Html.Raw(Model.DataContext.AddInputField<MenuItem>("minViewLevel"))
        @Html.Raw(Model.DataContext.AddInputField<MenuItem>("image"))
        @Html.Raw(Model.DataContext.AddInputField<MenuItem>("imageAlt"))
    </div>
    <div class="col-md-6">
        @Html.Raw(Model.DataContext.AddInputField<MenuItem>("link", inputType: "url"))
        @Html.Raw(Model.DataContext.AddInputField<MenuItem>("sortOrder"))
        @Html.Raw(Model.DataContext.AddTextAreaField<MenuItem>("description", rows: 3))
        @Html.Raw(Model.DataContext.AddCheckBoxField<MenuItem>("enabled"))
    </div>
}
@Html.Partial("PagedViewModel")
@section Scripts {
    @Html.Raw(ViewBag.PageControlScripts.ToString())
    <script>
        "use strict";

        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "Name";
        viewModel.primaryKeyFields = ["ID"];
        viewModel.initialFocusField = "inputName";

        viewModel.setQueryRecordCount(function() {
            return dataHub.queryMenuItemCount(@parentID);
        });

        viewModel.setQueryRecords(function(sortField, ascending, page, pageSize) {
            return dataHub.queryMenuItems(@parentID, sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function(keyValues) {
            return dataHub.deleteMenuItem(keyValues[0]);
        });

        viewModel.setNewRecord(function() {
            return dataHub.newMenuItem();
        });

        viewModel.setAddNewRecord(function(record) {
            return dataHub.addNewMenuItem(record);
        });

        viewModel.setUpdateRecord(function(record) {
            return dataHub.updateMenuItem(record);
        });

        $(viewModel).on("derivingObservableRecord", function(event, observableRecord) {
            // Initialize selected menu item record
            observableRecord.PageID(@parentID);
        });

        function deriveImageSource(imageFileName) {
            // TODO: Lookup proper images path...
            return "/Images/Menu/" + imageFileName;
        }

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editMenuItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();
            });

            $("#addNewEditDialog").on("hidden.bs.modal", function () {
                // On add/edit dialog hidden, re-enable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editMenuItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.visible();
                dismissButtons.prop("disabled", false);
            });
        });
    </script>
}