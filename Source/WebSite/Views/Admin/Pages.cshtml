@*******************************************************************************************************
//  Pages.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/18/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using openSPM.Models
@using Page = openSPM.Models.Page
@model AppModel
@section StyleSheets {
    <style>
        .popup-ok-button {
            position: absolute;
            right: 8px;
            top: calc(100% - 43px);
            top: -o-calc(100% - 43px);
            top: -webkit-calc(100% - 43px);
            top: -moz-calc(100% - 43px);
        }
    </style>
}
@{
    ViewBag.Title = "Page";
    ViewBag.PageName = "adminPages";
    ViewBag.PageControlScripts = new StringBuilder();

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "ID", "ID", "text-center" },
        new[] { "name", "&nbsp;&nbsp;&nbsp;Name", "text-left" },
        new[] { "title", "Title", "text-left" },
        new[] { null, "Menu&nbsp;Items", "text-center" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
}
@helper BodyRows()
{
    <td width="10%" data-bind="text: ID" class="text-center valign-middle" nowrap></td>
    <td width="30%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: name, click: $parent.viewPageRecord"></button></td>
    <td width="50%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(title, 1.5), attr: {title: title}"></div></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openMenuItemEditor.bind($data)" hub-dependent><span data-bind="attr: {id: 'menuItemMode' + ID}">Edit</span>&nbsp;&nbsp;<span class="badge" data-bind="text: getMenuItemCount(ID), attr: {id: 'menuItemCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog()
{
    <div class="col-md-6">
        @Html.Raw(ViewBag.DataContext.AddInputField<Page>("name"))
        @Html.Raw(ViewBag.DataContext.AddInputField<Page>("title"))
        @Html.Raw(ViewBag.DataContext.AddInputField<Page>("minViewLevel"))
        @Html.Raw(ViewBag.DataContext.AddTextAreaField<Page>("serverConfiguration"))
    </div>
    <div class="col-md-6">
        @Html.Raw(ViewBag.DataContext.AddTextAreaField<Page>("clientConfiguration"))
        @Html.Raw(ViewBag.DataContext.AddTextAreaField<Page>("description", rows: 3))
        @Html.Raw(ViewBag.DataContext.AddCheckBoxField<Page>("enabled"))
    </div>
}
@Html.Partial("PagedViewModel")
<div id="editMenuItemDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="editMenuItemFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Html.Raw(ViewBag.PageControlScripts.ToString())
    <script>
        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "name";
        viewModel.primaryKeyFields = ["ID"];
        viewModel.initialFocusField = "inputname";

        viewModel.setQueryRecordCount(function () {
            return dataHub.queryPageCount();
        });

        viewModel.setQueryRecords(function (sortField, ascending, page, pageSize) {
            return dataHub.queryPages(sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function (keyValues) {
            return dataHub.deletePage(keyValues[0]);
        });

        viewModel.setNewRecord(function () {
            return dataHub.newPage();
        });

        viewModel.setAddNewRecord(function (record) {
            return dataHub.addNewPage(record);
        });

        viewModel.setUpdateRecord(function (record) {
            return dataHub.updatePage(record);
        });

        function getMenuItemCount(pageID) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryMenuItemCount(pageID).done(function (count) {
                    const menuItemMode = $("#menuItemMode" + pageID);
                    const menuItemCount = $("#menuItemCount" + pageID);
                    const modeText = count > 0 ? "Edit" : "Add";

                    if (menuItemMode.text() !== modeText)
                        menuItemMode.text(modeText);

                    if (menuItemCount.text() !== count.toString())
                        menuItemCount.text(count.toString());
                });
            }

            return "0";
        }

        //$(window).resize(function () {
        //    setTimeout(function () {
        //        $("#editMenuItemFrame").attr("height", ($("#contentWell").outerHeight(true) - 50) + "px");
        //    }, 1500);
        //});

        $(viewModel).on("pageRecordsQueried", function (event) {
            $("#editMenuItemFrame").attr("height", ($("#contentWell").outerHeight(true) - 50) + "px");
        });

        function openMenuItemEditor(record) {
            $("#editMenuItemFrame").attr({
                "src": "/Admin/MenuItem?ID=" + record.ID + "&Name=" + encodeURIComponent(record.name),
                "height": ($("#contentWell").outerHeight(true) - 50) + "px",
                "width": "100%"
            });

            $("#editMenuItemDialog").modal("show");
        }

        $("#editMenuItemDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();
        });

        $(function() {
            $("#editMenuItemDialog").modal({ show: false, backdrop: "static", keyboard: false });
        });
    </script>
}