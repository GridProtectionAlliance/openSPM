@*******************************************************************************************************
    //  Patches.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  02/20/2016 - Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Security.AccessControl
@using GSF
@using GSF.Web.Model
@using openSPM.Model
@model openSPM.Model.AppModel
@{
    DataContext dataContext = Model.DataContext;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "PatchID", "SPM&nbsp;Reference", "text-center" },
        new[] { "BusinessUnitID", "Business Unit", "text-center"},
        new[] { "ImpactKey", "Impact", "text-center" },
        new[] { "VendorReleaseDate", "Release&nbsp;Date", "text-center" },
        new[] { "EvaluationDeadline", "Deadline", "text-center"},
        new[] { null, "Patch Status", "text-center valign-middle" },
        new[] { null, "Documents", "text-center valign-middle" }
    };

    ViewBag.Platforms = Json.Encode(dataContext.Table<Platform>().QueryRecords().ToArray());
    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Patches for Assesment";
    ViewBag.BUNames = dataContext.Table<BusinessUnit>().QueryRecords("Name").ToArray();
    ViewBag.BUCounts = dataContext.Table<BusinessUnit>().QueryRecordCount();
}
<div class="row">
    <div class="col-md-6">
        <label for="bufilter">Business Unit Filter:</label>
        <select class="form-control" id="bufilter" onchange="filterBU()">
            <option value="None">None</option>
            @for (int i = 0; i < ViewBag.BUCounts; ++i)
            {
                var str = "<option value='" + ViewBag.BUNames[i].Name + "'>" + ViewBag.BUNames[i].Name + "</option>";
                @Html.Raw(str)
            }
        </select>
    </div>
</div>
<br/>
@helper BodyRows()
{
string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');

    <td width="5%" class="text-center valign-middle"><img src="@(statusLightsImagePath)greenlight.png" alt="Enabled" data-bind=""><img src="@(statusLightsImagePath)disabledlight.png" alt="Disabled" data-bind=""></td>
    <td width="15%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: PatchID, click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: lookupNameValue(BusinessUnitID)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: lookupImpactValue(ImpactKey)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: VendorReleaseDate.formatDate(DateFormat)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: EvaluationDeadline.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click: beginAssessment.bind($data)">Begin Assessment</button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="">0</button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
    </div>
}
@Html.Partial("PagedViewModel")
<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<PatchPatchStatusDetail>(ViewBag, "PatchID", 2))
        @Html.Raw(Model.RenderValueListClientLookupFunction("impact"))
        @Html.Raw(Model.RenderAbstract<BusinessUnit>("Name"))

        function beginAssessment(record) {
            console.log(record);
        }
        function filterBU() {
            
            //var $rows = $('#recordsTable tbody tr');
            //if ($('#bufilter').val() != "None") {
                
            //    $rows.show().filter(function (i, data) {
            //        console.log($(data).children()[2].innerText == $('#bufilter').val());
            //            //console.log($(data).children()[2].innerHTML);
            //        return $(data).children()[2].innerText !== $('#bufilter').val();
            //    }).hide();
            //}
           
            //viewModel.queryPageRecords();
            //$('#search').keyup(function () {
            //    console.log($rows);
            //    var val = '^(?=.*\\b' + $.trim($(this).val()).split(/\s+/).join('\\b)(?=.*\\b') + ').*$',
            //        reg = RegExp(val, 'i'),
            //        text;

            //    $rows.show().filter(function () {
            //        text = $(this).text().replace(/\s+/g, ' ');
            //        return !reg.test(text);
            //    }).hide();
            //});
        }
       
   
    </script>
}