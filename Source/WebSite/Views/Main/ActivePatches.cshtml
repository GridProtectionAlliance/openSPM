@*******************************************************************************************************
    //  Patches.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  02/20/2016 - Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Security.AccessControl
@using GSF
@using GSF.Data.Model
@using GSF.Web
@using GSF.Web.Model
@using openSPM.Model
@model openSPM.Model.AppModel
@section StyleSheets {
    @Styles.Render("~/css.bundle/fileinput")
}


@{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> appSettings = Model.Global.ApplicationSettings;
    string value, statusLightsImagePath;

    const string noneImage = "greenlight.png";
    const string warningImage = "yellowlight.png";
    const string alarmImage = "amberlight.png";
    const string criticalAlarmImage = "redlight.png";
    const string violationImage = "blacklight.png";

    int groupID = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM ValueListGroup WHERE Name = 'dayLimits'") ?? 0;
    ViewBag.alarmDayLimits = Json.Encode(dataContext.Table<ValueList>().QueryRecords(restriction: new RecordRestriction("GroupID = {0}", groupID)).ToArray());

    if (!appSettings.TryGetValue("statusLightsImagePath", out value))
    {
        statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
        statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');
    }
    else
    {
        statusLightsImagePath = value;
    }


    ViewBag.AssessActions = dataContext.Table<ValueList>().QueryRecords("[Key] AsC",restriction: new RecordRestriction("GroupID = 6")).ToArray();
    ViewBag.AssessActionCount = dataContext.Table<ValueList>().QueryRecordCount(new RecordRestriction("GroupID = 6"));

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "PatchID", "Patch ID", "text-center" },
        new[] { "BusinessUnitID", "Business Unit", "text-center"},
        new[] { null, "Vendor", "text-center valign-middle" },
        new[] { "VendorReleaseDate", "Release&nbsp;Date", "text-center" },
        new[] { "EvaluationDeadline", "Deadline", "text-center"},
        new[] { "IsExpedited", "Expedite", "text-center"},
        new[] { null, "Action", "text-center valign-middle" },
        new[] { null, "Documents", "text-center valign-middle" }
    };

    ViewBag.Platforms = Json.Encode(dataContext.Table<Platform>().QueryRecords().ToArray());
    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;
    //ViewBag.CanEdit = false;
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Patches for Assesment";
    ViewBag.BUNames = dataContext.Table<BusinessUnit>().QueryRecords("Name", restriction: new RecordRestriction("IsDeleted = 0")).ToArray();
    ViewBag.BUCounts = dataContext.Table<BusinessUnit>().QueryRecordCount(new RecordRestriction("IsDeleted = 0"));
}
@helper BUFilter()
{
    <div class='row'>
        <div class='col-md-6'>
            <label for='bufilter'>Business Unit Filter:</label>
            <select class='form-control' id='bufilter' onchange='filterBU()'>
                <option value='none'>None</option>
                <option value='mine' selected>My Assessments</option>
                @for (int i = 0; i < ViewBag.BUCounts; ++i)
                {
                    var str = "<option value='" + ViewBag.BUNames[i].ID + "'>" + ViewBag.BUNames[i].Name + "</option>";
                    @Html.Raw(str)
                }
            </select>
        </div>
    </div>
}
@helper BodyRows()
{

    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getStatusImage($($element), $data)}"></td>
    <td width="15%" class="text-center valign-middle" data-bind="text: PatchMnemonic"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: lookupAbbreviationValue(BusinessUnitID)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: VendorName"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: VendorReleaseDate.formatDate(DateFormat)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: EvaluationDeadline.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle"><span data-bind="visible: IsExpedited" class="glyphicon glyphicon-check"></span></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click: beginAssessment.bind($data), enable: $parent.canEdit() && $parent.dataHubIsConnected()">Assess</button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(PatchStatusID, PatchID, $($element)), attr: {id: 'documentCount' + PatchStatusID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        @*<button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>*@
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @*<div class="row" data-bind="visible: $parent.recordMode()==RecordMode.View ">
        <div class="col-md-12">
            @Html.Raw(dataContext.AddInputField<PatchPatchStatusDetail>("PatchMnemonic"))
            @Html.Raw(dataContext.AddInputField<PatchPatchStatusDetail>("VendorName"))
            @Html.Raw(dataContext.AddInputField<PatchPatchStatusDetail>("PlatformName"))
            @Html.Raw(dataContext.AddDateField<PatchPatchStatusDetail>("VendorReleaseDate"))
            @Html.Raw(dataContext.AddDateField<PatchPatchStatusDetail>("EvaluationDeadline"))
            @Html.Raw(dataContext.AddTextAreaField<PatchPatchStatusDetail>("Summary"))
        </div>
    </div>*@
    
}
@Html.Partial("PagedViewModel")
<div id="manageDocumentsDialog" class="modal fade modal-wide" style="z-index: 2000">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
         </div>
    </div>
</div>

<div id="assessmentDialog" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg" style="width: 90%">
        <div class="modal-content">
            <div class="modal-header auto-height" >
                <button type="button" class="close" data-dismiss="modal" id="dismissDialogButton">&times;</button>
                <h4 class="modal-title">
                    <span>Conduct Assessment</span>
                </h4>
            </div>
            <div class="modal-body auto-height">
                <form role="form">
                    <div id="patchid" class="form-control" style="visibility: hidden"></div>
                    <label for="patchdetails"><h3><u>Patch Details</u></h3></label>
                    <div id="patchdetails"class="row">
                        <div class="col-md-6">
                            <label for="patchname">Patch Name</label>
                            <div class="form-control" id="patchname"></div>
                            <label for="businessunit">Business Unit</label>
                            <div class="form-control" id="businessunit"></div>
                            <label for="productname">Product</label>
                            <div class="form-control" id="productname"></div>
                            <label for="vendorname">Vendor</label>
                            <div class="form-control" id="vendorname"></div>
                            <label for="patchclass">Patch Class</label>
                            <div class="form-control" id="patchclass"></div>
                            <label for="releasedate">Release Date</label>
                            <div class="form-control" id="releasedate"></div>

                        </div>
                        <div class="col-md-6">
                            <label for="impactkey">Impact Status</label>
                            <div class="form-control" id="impactkey"></div>
                            <label for="patchdetail">Patch Details</label>
                            <div class="form-control" id="patchdetail"></div>
                            <label for="patchsummary">Patch Summary</label>
                            <div class="form-control" id="patchsummary"></div>
                            <label for="patchcitation">Patch Citations</label>
                            <div class="form-control" id="patchcitation"></div>
                            <label for="patchlink">Link</label>
                            <div class="form-control" id="patchlink"></div>
                            <label for="deadline">Evaluation Deadline</label>
                            <div class="form-control" id="deadline"></div>
                        </div>
                        @*<div class="row" style="padding-left: 13px">
                            <iframe style="border: none" id="manageDocumentsWindowFrame" marginwidth="0" marginheight="0"></iframe>
                        </div>*@

                    </div>
                    <br/>
                    <div class="row" style="padding-left: 13px">
                        <button type="button" class="btn btn-primary" id="patchDocuments">Get Patch Documents</button>
                    </div>

                    <hr/>
                    <label for="assessment"><h3><u>Assessment</u></h3></label>
                        <div id="assessment">
                            <label for="assessmentSelect">Assessment Result:</label>
                            <select class="form-control"id="assessmentSelect">
                                @for (int i = 0; i < ViewBag.AssessActionCount; ++i)
                                {
                                    <option value="@Html.Raw(i + 1)">@Html.Raw(ViewBag.AssessActions[i].Text)</option>
                                }
                            </select>
                            <label for="details">Details/Notes:</label>
                            <textarea id="details" class="form-control"></textarea>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="uploadFiles">Add Assessment Related Documents:</label>
                                        <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
                                    </div>
                                </div>
                            </div>
                        </div>
                  </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" data-dismiss="modal" id="saveAssessmentButton">Save Assessment</button>
                <button type="button" class="btn btn-default" data-dismiss="modal" id="cancelRecordButton">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
@Scripts.Render("~/js.bundle/fileinput")
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<PatchPatchStatusDetail>(ViewBag))

        @Html.Raw(Model.RenderValueListClientLookupFunction("impact"))
        @Html.Raw(Model.RenderValueListClientLookupFunction("patchClass"))
        @Html.Raw(Model.RenderAbstract<BusinessUnit>("Abbreviation"))
        @Html.Raw(Model.RenderAbstract<BusinessUnit>("Name"))

        function beginAssessment(record) {
            $('#patchid').html(record.PatchStatusID);
            $('#patchname').html(record.PatchMnemonic);
            $('#businessunit').html(lookupNameValue(record.BusinessUnitID).toString());
            $('#productname').html(record.PlatformName + " / Version: " + record.PlatformVersion);
            $('#vendorname').html(record.VendorName);
            $('#patchclass').html(lookupPatchclassValue(record.PatchClassKey));
            $('#releasedate').html(record.VendorReleaseDate.formatDate(DateFormat));
            $('#deadline').html(record.EvaluationDeadline.formatDate(DateFormat));
            $('#impactkey').html(lookupImpactValue(record.ImpactKey));
            $('#patchdetail').html(record.Detail);
            $('#patchsummary').html(record.Summary);
            $('#patchcitation').html(record.Citations);
            $('#patchlink').html(record.Link);
            $('#details').val("");
            $('#assessmentSelect').prop('selectedIndex', 0);
            //openManageDocumentsWindow(record);
            $("#assessmentDialog").modal("show");
            $('#patchDocuments').on('click', function(){ openManageDocumentsModal(record); })
            $('#saveAssessmentButton').off('click');
            $('#saveAssessmentButton').one('click', function() { if (viewModel.dataHubIsConnected) {
                                                                    viewModel.currentRecord(record);
                                                                    viewModel.saveNewRecord();
                                                                    $('#saveAssessmentButton').off('click');
                                                                  }
            });



        }

        function getStatusImage(element, record) {

            var alarmDayLimits = @Html.Raw(ViewBag.alarmDayLimits);
            const critcalAlarmDays = alarmDayLimits[0].Value;
            const warningDays = alarmDayLimits[3].Value -alarmDayLimits[1].Value;
            const alarmDays = alarmDayLimits[3].Value - alarmDayLimits[2].Value;
            const violationDays = alarmDayLimits[3].Value - alarmDayLimits[3].Value;
            const daysUntilDeadline = (record.EvaluationDeadline.toDate()).daysBetween(new Date());

            var image, title;
            switch (true) {
                case (daysUntilDeadline <= violationDays):
                    image = "@violationImage";
                    title = "Violation";
                    break;
                case (daysUntilDeadline <= critcalAlarmDays):
                    image = "@criticalAlarmImage";
                    title = "Critical Alarm";
                    break;
                case (daysUntilDeadline <= alarmDays):
                    image = "@alarmImage";
                    title = "Alarm";
                    break;
                case (daysUntilDeadline <=  warningDays):
                    image = "@warningImage";
                    title = "Warning";
                    break;
                default:
                    image = "@noneImage";
                    title = "OK";
                    break;
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }


        function getDocumentCount(sourceID, patchID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("Patch", patchID, null).done(function (count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function () {
            setTimeout(function () {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsWindow(record) {
            $("#manageDocumentsWindowFrame").attr({
                "src": "@Url.Content("~/Main/Documents/")" + "?SourceTable=Patch&SourceField=PatchID&SourceID=" + record.PatchID + "&Name=" + encodeURIComponent(record.PatchMnemonic) + "&HideButton=true" + "&HideHeader=1",
               "height": "200px",
               "width": "97%"
        });
        }
        
        function openManageDocumentsModal(record) {
            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents/")" + "?SourceTable=Patch&SourceField=PatchID&SourceID=" + record.PatchID + "&Name=" + encodeURIComponent(record.PatchMnemonic) + "&HideButton=true" + "&titleStart=View",
                "height": ($(document).height() - 150) + "px",
               "width": "100%"
            });
            $("#manageDocumentsDialog").modal("show");
        }

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.PatchStatusID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=Patch&SourceField=PatchID&SourceID=" + record.PatchID + "&Name=" + encodeURIComponent(record.PatchMnemonic),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
        });

        $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=AssessmentDocument&SourceField=AssessmentID"))";
        var assessmentID;


        $(viewModel).on("beforeSave", function(event, observableRecord){
            observableRecord.ImpactKey = $('#assessmentSelect').val(); //high jack ImpactKey to save assessment key
            observableRecord.Detail = $('#details').val();
        });


        $(viewModel).on("recordSaved", function(event, record, newRecord){


            // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
            if (viewModel.dataHubIsConnected()) {
                if (newRecord) {
                    dataHub.getLastAssessmentID().done(function(id) {
                        assessmentID = id.toString();
                        $("#uploadFiles").fileinput("upload");

                    });
                }

                ++record.PatchStatusKey;
                if ($('#assessmentSelect').val() > 2)
                    ++record.PatchStatusKey;
                dataHub.updatePatchStatusKey(record.PatchStatusID, record.PatchStatusKey).done(function(){
                    viewModel.queryPageRecords();
                });




            }
        });


        $(function() {

            $("#assessmentDialog").modal({ show: false, backdrop: "static", keyboard: false });

            $("#assessmentDialog").on("shown.bs.modal", function() {
                
                $('#uploadFiles').fileinput('destroy');

                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12, 
                    uploadExtraData: function(){
                        return {SourceID: assessmentID};
                    }
                });
                
                $('#uploadFiles').val("");

            });
            
            $("#addNewEditDialog").on("shown.bs.modal", function() {
                $('#editRecordButton').attr('disabled', 'disabled');
                    
               
            });


            $("#pageHeader").append("@Html.Raw(BUFilter().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");
        
            if ($('#bufilter').val() == 'none') {
                viewModel.filterText =  "Action=0; Filter=%";
                viewModel.filterPageRecords();
            }else if($('#bufilter').val() == 'mine'){
                viewModel.filterText = "Action=1; Filter=%";
                viewModel.filterPageRecords();
            } else {
                viewModel.filterText = "Action=0; Filter=" + $('#bufilter').val();
                viewModel.filterPageRecords();

            }
            

            setTimeout(function() {viewModel.calculatePageSize(true);}, 100);
        });
        
        //$(viewModel).on("beforeEdit", function(event, observableRecord) {
        //    observableRecord.VendorReleaseDate = observableRecord.VendorReleaseDate.formatDate(DateFormat);
        //    $('#readonlyinputVendorReleaseDate').val($('#readonlyinputVendorReleaseDate').val().formatDate(DateTimeFormat));
        //});


        function filterBU() {
        
            if ($('#bufilter').val() == 'none') {
                viewModel.filterText =  "Action=0; Filter=%";
                viewModel.filterPageRecords();
            }else if($('#bufilter').val() == 'mine'){
                viewModel.filterText = "Action=1; Filter=%";
                viewModel.filterPageRecords();
            } else {
                viewModel.filterText = "Action=0; Filter=" + $('#bufilter').val();
                viewModel.filterPageRecords();

            }
            
        }


    </script>
}