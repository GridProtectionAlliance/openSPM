@*******************************************************************************************************
    //  Patches.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  02/20/2016 - Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Security.AccessControl
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@using openSPM.Model
@model openSPM.Model.AppModel
@{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> appSettings = Model.Global.ApplicationSettings;
    string setting;

    const string noneImage = "greenlight.png";
    const string warningImage = "yellowlight.png";
    const string alarmImage = "amberlight.png";
    const string criticalAlarmImage = "redlight.png";
    const string violationImage = "blacklight.png";

    ViewBag.AssessActions = dataContext.Table<ValueList>().QueryRecords("[Key] AsC",restriction: new RecordRestriction("GroupID = 6")).ToArray();
    ViewBag.AssessActionCount = dataContext.Table<ValueList>().QueryRecordCount(new RecordRestriction("GroupID = 6"));

    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "PatchID", "SPM&nbsp;Reference", "text-center" },
        new[] { "BusinessUnitID", "Business Unit", "text-center"},
        new[] { null, "Vendor", "text-center valign-middle" },
        new[] { "VendorReleaseDate", "Release&nbsp;Date", "text-center" },
        new[] { "EvaluationDeadline", "Deadline", "text-center"},
        new[] { null, "Action", "text-center valign-middle" },
        new[] { null, "Documents", "text-center valign-middle" }
    };

    ViewBag.Platforms = Json.Encode(dataContext.Table<Platform>().QueryRecords().ToArray());
    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Patches for Assesment";
    ViewBag.BUNames = dataContext.Table<BusinessUnit>().QueryRecords("Name").ToArray();
    ViewBag.BUCounts = dataContext.Table<BusinessUnit>().QueryRecordCount();
}
<div class="row">
    <div class="col-md-6">
        <label for="bufilter">Business Unit Filter:</label>
        <select class="form-control" id="bufilter" onchange="filterBU()">
            <option value="None">None</option>
            @for (int i = 0; i < ViewBag.BUCounts; ++i)
            {
                var str = "<option value='" + ViewBag.BUNames[i].Name + "'>" + ViewBag.BUNames[i].Name + "</option>";
                @Html.Raw(str)
            }
        </select>
    </div>
</div>
<br/>
@helper BodyRows()
{
string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');

    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getStatusImage($($element), $data)}"></td>
    <td width="15%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: lookupVendorPatchNameValue(PatchID), click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: lookupNameValue(BusinessUnitID)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: lookupVendorName(lookupPatchVendorID(PatchID))"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: VendorReleaseDate.formatDate(DateFormat)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: EvaluationDeadline.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click: beginAssessment.bind($data)">Assess</button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(PatchStatusID, PatchID, $($element)), attr: {id: 'documentCount' + PatchStatusID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
    </div>
}
@Html.Partial("PagedViewModel")
<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div id="assessmentDialog" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" id="dismissDialogButton">&times;</button>
                <h4 class="modal-title">
                    <span>Begin Assessment</span>
                </h4>
            </div>
            <div class="modal-body auto-height">
                <form role="form">
                    <div id="patchid" class="form-control" style="visibility: hidden"></div>
                    <label for="patchname">Patch Name</label>
                    <div class="form-control" id="patchname"></div>
                    <label for="businessunit">Business Unit</label>
                    <div class="form-control" id="businessunit"></div>
                    <label for="assessmentSelect">Assessment Result</label>
                    <select class="form-control"id="assessmentSelect">
                        @for (int i = 0; i < ViewBag.AssessActionCount; ++i)
                        {
                            <option value="@Html.Raw(i + 1)">@Html.Raw(ViewBag.AssessActions[i].Text)</option>
                        }
                        @*<option value="1" selected="selected">Install/Remediate</option>
                        <option value="2">Mitigate</option>
                        <option value="3">Not Applicable - Does not match system config</option>
                        <option value="4">Not Applicable - Patch has no security related content</option>*@
                    </select>
                    <label for="details">Details/Notes</label>
                    <textarea id="details" class="form-control"></textarea>
                </form>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" data-dismiss="modal" id="saveAssessmentButton">Save</button>
                <button type="button" class="btn btn-default" data-dismiss="modal" id="cancelRecordButton">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<PatchPatchStatusDetail>(ViewBag, "VendorReleaseDate", 2))
        @Html.Raw(Model.RenderValueListClientLookupFunction("impact"))
        @Html.Raw(Model.RenderAbstract<BusinessUnit>("Name"))
        @Html.Raw(Model.RenderAbstract<Patch>("VendorPatchName"))
        @Html.Raw(Model.RenderAbstract<Vendor>("Name", "ID", "lookupVendorName", "VendorName"))
        @Html.Raw(Model.RenderAbstract<Patch>("VendorID", "ID", "lookupPatchVendorID", "PatchVendorID"))

        $(function() {

            $("#assessmentDialog").modal({ show: false, backdrop: "static", keyboard: false });

            $(window).on("assessmentMade", function () {
                viewModel.queryPageRecords();
            });
        });

        function beginAssessment(record) {
            $('#patchid').html(record.PatchStatusID);
            $('#patchname').html(record.PatchMnemonic);
            $('#businessunit').html(lookupNameValue(record.BusinessUnitID).toString());
            $('#details').val("");
            $('#assessmentSelect').prop('selectedIndex', 0);
            $("#assessmentDialog").modal("show");
            $('#saveAssessmentButton').one('click', function() { addAssessment(record)});
        }

        function addAssessment(data) {
            var record = { 'PatchStatusID': data.PatchStatusID, 'AssessmentResultKey': $('#assessmentSelect').val(), 'Details': $('#details').val() };
            if (viewModel.dataHubIsConnected) {
                dataHub.addNewAssessment(record).done(function () {
                    ++data.PatchStatusKey;
                    dataHub.updatePatchStatusKey(data.PatchStatusID, data.PatchStatusKey).done(function() {
                        $(window).trigger("assessmentMade");
                    });
                    
                });
            }
        }

        function getStatusImage(element, record) {
            const daysUntilDeadline = (record.EvaluationDeadline.toDate()).daysBetween(new Date());
            var image, title;
            switch (true) {
                case (daysUntilDeadline > 14 && daysUntilDeadline <= 21):
                    image = "@warningImage";
                    title = "Warning";
                    break;
                case (daysUntilDeadline > 7 && daysUntilDeadline <= 14):
                    image = "@alarmImage";
                    title = "Alarm";
                    break;
                case (daysUntilDeadline > 0 && daysUntilDeadline <= 7):
                    image = "@criticalAlarmImage";
                    title = "Critical Alarm";
                    break;
                case (daysUntilDeadline <= 0):
                    image = "@violationImage";
                    title = "Violation";
                    break;

                default:
                    image = "@noneImage";
                    title = "OK";
                    break;
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }


        function getDocumentCount(sourceID, patchID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("Patch", patchID).done(function (count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function () {
            setTimeout(function () {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.PatchID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=Patch&SourceField=PatchID&SourceID=" + record.PatchID + "&Name=" + encodeURIComponent(record.VendorPatchName),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
        });

        $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        function filterBU() {

            //var $rows = $('#recordsTable tbody tr');
            //if ($('#bufilter').val() != "None") {

            //    $rows.show().filter(function (i, data) {
            //        console.log($(data).children()[2].innerText == $('#bufilter').val());
            //            //console.log($(data).children()[2].innerHTML);
            //        return $(data).children()[2].innerText !== $('#bufilter').val();
            //    }).hide();
            //}

            //viewModel.queryPageRecords();
            //$('#search').keyup(function () {
            //    console.log($rows);
            //    var val = '^(?=.*\\b' + $.trim($(this).val()).split(/\s+/).join('\\b)(?=.*\\b') + ').*$',
            //        reg = RegExp(val, 'i'),
            //        text;

            //    $rows.show().filter(function () {
            //        text = $(this).text().replace(/\s+/g, ' ');
            //        return !reg.test(text);
            //    }).hide();
            //});
        }


    </script>
}