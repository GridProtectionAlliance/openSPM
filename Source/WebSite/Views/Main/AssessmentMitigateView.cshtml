@*******************************************************************************************************
//  AssessmentMitigateView.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/29/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using openSPM.Model
@using GSF
@using GSF.Data.Model
@using GSF.Web
@using GSF.Web.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> appSettings = Model.Global.ApplicationSettings;
    string value, statusLightsImagePath;

    const string noneImage = "greenlight.png";
    const string warningImage = "yellowlight.png";
    const string alarmImage = "amberlight.png";
    const string criticalAlarmImage = "redlight.png";
    const string violationImage = "blacklight.png";
    int groupID = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM ValueListGroup WHERE Name = 'dayLimits'") ?? 0;
    ViewBag.alarmDayLimits = Json.Encode(dataContext.Table<ValueList>().QueryRecords(restriction: new RecordRestriction("GroupID = {0}", groupID)).ToArray());

    if (!appSettings.TryGetValue("statusLightsImagePath", out value))
    {
        statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
        statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');
    }
    else
    {
        statusLightsImagePath = value;
    }

    ViewBag.AssessActions = dataContext.Table<ValueList>().QueryRecords("[Key] AsC", restriction: new RecordRestriction("GroupID = 6")).ToArray();
    ViewBag.AssessActionCount = dataContext.Table<ValueList>().QueryRecordCount(new RecordRestriction("GroupID = 6"));



    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Alarm", "text-center valign-middle" },
        new[] { "ID", "Patch ID", "text-left" },
        new[] { null, "Business Unit", "text-left valign-middle"},
        new[] { null, "Title", "text-left valign-middle"},
        new[] { "AssessmentResultKey", "Result", "text-left" },
        new[] { "CreatedOn", "Due Date", "text-left"},
        new[] { null, "Action", "text-center valign-middle" },
        new[] { null, "Documents", "text-center valign-middle" }

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Assessment";
    ViewBag.HideAddNewButton = true;
    ViewBag.ShowSearchFilter = true;
}
@helper BodyRows()
{
    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getStatusImage($($element), $data)}"></td>
    <td width="10%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: VendorPatchName, click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-left valign-middle"><div nowrap data-bind="text: Name"></div></td>
    <td width="25%" class="text-left valign-middle"><div nowrap data-bind="text: Title"></div></td>
    <td width="10%" class="text-left valign-middle"><div nowrap data-bind="text: lookupAssessactionValue(AssessmentResultKey)"></div></td>
    <td width="10%" class="text-left valign-middle"><div nowrap data-bind="text: getDueDate(CreatedOn)"></div></td>
    <td width="30%" class="text-center valign-middle">
        <button type="button" data-bind="click: $parent.addPageRecord.bind($data), visible: $parent.canAddNew() && $parent.dataHubIsConnected()" class="btn btn-danger btn-sm">Create Plan</button>
        <button type="button" data-bind="click: $parent.editPageRecord.bind($data), visible: $parent.canEdit() && $parent.dataHubIsConnected()" class="btn btn-danger btn-sm">Reassess</button>
    </td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(ID, $($element)), attr: {id: 'documentCount' + ID}">0</span></button></td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="row">
        <div class="col-md-12">
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("Title", fieldLabel: "Patch Title"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("VendorPatchName", fieldLabel: $"{Model.Global.CompanyAcronym} Patch Identifier"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("VendorName", fieldLabel: "Vendor"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("PlatformName", fieldLabel: "Product"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("Name", fieldLabel: "Business Unit"))
            @Html.Raw(dataContext.AddTextAreaField<AssessmentMitigateView>("PatchDetails", fieldLabel: "Patch Details"))
            <div data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
                @Html.Raw(dataContext.AddTextAreaField<AssessmentMitigateView>("Summary"))
            </div>
        </div>

    </div>

    <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.Edit">
        <div class="col-md-12">
            @Html.Raw(Model.AddValueListSelectField<AssessmentMitigateView>("AssessmentResultKey", "assessAction", fieldLabel: "Assessment Result"))
            @Html.Raw(dataContext.AddTextAreaField<AssessmentMitigateView>("Details"))
        </div>
    </div>

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<AssessmentMitigateView>(ViewBag))
        @Html.Raw(Model.RenderValueListClientLookupFunction("assessAction", "Abbreviation"))

        $(function() {

            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });

            
            $('#addNewEditDialog').on("shown.bs.modal",function(){
                $('#inputTitle').prop('disabled', true);
                $('#inputVendorPatchName').prop('disabled', true);
                $('#inputVendorName').prop('disabled', true);
                $('#inputName').prop('disabled', true);
                $('#inputPlatformName').prop('disabled', true);
            });
        });

        function getDueDate(day) {
            var newdate = new Date(day.toDate().getTime() + 35 * 24 * 60 * 60 * 1000);
            var date = newdate.getDate();
            var month = newdate.getMonth() + 1;
            var year = newdate.getFullYear();
            var processeddate = month + '/' + date + '/' + year;
            //console.log(processeddate);
            return processeddate;
        }

        function getStatusImage(element, record) {

            var alarmDayLimits = @Html.Raw(ViewBag.alarmDayLimits);
            const critcalAlarmDays = alarmDayLimits[0].Value;
            const warningDays = alarmDayLimits[1].Value;
            const alarmDays = alarmDayLimits[2].Value;
            const violationDays = alarmDayLimits[3].Value;
            const daysUntilDeadline =  violationDays + (record.CreatedOn.toDate()).daysBetween(new Date());

            var image, title;
            switch (true) {
                case (daysUntilDeadline <= violationDays - violationDays):
                    image = "@violationImage";
                    title = "Violation";
                    break;
                case (daysUntilDeadline <= critcalAlarmDays):
                    image = "@criticalAlarmImage";
                    title = "Critical Alarm";
                    break;
                case (daysUntilDeadline <= violationDays - alarmDays):
                    image = "@alarmImage";
                    title = "Alarm";
                    break;
                case (daysUntilDeadline <= violationDays - warningDays):
                    image = "@warningImage";
                    title = "Warning";
                    break;
                default:
                    image = "@noneImage";
                    title = "OK";
                    break;
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }


        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("Assessment", sourceID, null).done(function (count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function () {
            setTimeout(function () {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.ID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=Assessment&SourceField=AssessmentID&SourceID=" + record.ID + "&Name=" + encodeURIComponent(record.VendorPatchName),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
        });

        $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });
        
        $(viewModel).on("newRecord", function(event, newRecord, oldRecord){
            newRecord.PatchStatusID = oldRecord.PatchStatusID;
            newRecord.VendorPatchName = oldRecord.VendorPatchName;
            newRecord.Name = oldRecord.Name;
            newRecord.PlatformName = oldRecord.PlatformName;
            newRecord.BusinessUnitID = oldRecord.BusinessUnitID;
            newRecord.PatchStatusKey = oldRecord.PatchStatusKey;
        });
        
        //$(viewModel).on("recordSaved", function(event, record, newRecord){
        //    // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
        //    if (viewModel.dataHubIsConnected()) {
        //        if (newRecord) {
        //            var miplan = {'Title': record.VendorPatchName, 'Theme': 13, 'BusinessUnitID': record.BusinessUnitID, 'Field2': record.PlatformName, 'Field3': record.Summary, 'Description': '', 'StatusNotes': ''};
        //            dataHub.addNewMiPlan(miplan).done(function(){
        //                dataHub.getLastMiPlanRecord().done(function(miPlanID) {
        //                    dataHub.getLastMitigationPlanID().done(function(planID) {
        //                        dataHub.getMitigationPlan(planID).done(function(data){
        //                            data.MiPlanID = miPlanID;
        //                            dataHub.updateMitigationPlan(data);
        //                        });
                            
        //                    });

        //                });
        //            });
        //            ++record.PatchStatusKey;
        //            dataHub.updatePatchStatusKey(record.PatchStatusID, record.PatchStatusKey).done(function(){
        //                viewModel.queryPageRecords();
        //            });
                    
                   
        //        }
        //        else{
        //            if(record.AssessmentResultKey >2 ) ++record.PatchStatusKey;
        //            dataHub.updatePatchStatusKey(record.PatchStatusID, record.PatchStatusKey).done(function(){
        //                viewModel.queryPageRecords();
        //            });
        //        }
        //    }
        //});
    </script>
}