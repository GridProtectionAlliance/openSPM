@*******************************************************************************************************
    //  AssessmentMitigateView.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  02/29/2016 - Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using openSPM.Model
@using GSF
@using GSF.Data.Model
@using GSF.Web
@using GSF.Web.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> appSettings = Model.Global.ApplicationSettings;
    string value, statusLightsImagePath;

    const string noneImage = "greenlight.png";
    const string warningImage = "yellowlight.png";
    const string alarmImage = "amberlight.png";
    const string criticalAlarmImage = "redlight.png";
    const string violationImage = "blacklight.png";
    int groupID = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM ValueListGroup WHERE Name = 'dayLimits'") ?? 0;
    ViewBag.alarmDayLimits = Json.Encode(dataContext.Table<ValueList>().QueryRecords(restriction: new RecordRestriction("GroupID = {0}", groupID)).ToArray());

    if (!appSettings.TryGetValue("statusLightsImagePath", out value))
    {
        statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
        statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');
    }
    else
    {
        statusLightsImagePath = value;
    }

    ViewBag.AssessActions = dataContext.Table<ValueList>().QueryRecords("[Key] AsC", restriction: new RecordRestriction("GroupID = 6")).ToArray();
    ViewBag.AssessActionCount = dataContext.Table<ValueList>().QueryRecordCount(new RecordRestriction("GroupID = 6"));



    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Alarm", "text-center valign-middle" },
        new[] { "ID", "Patch ID", "text-left" },
        new[] { null, "Business Unit", "text-left valign-middle"},
        new[] { null, "Title", "text-left valign-middle"},
        new[] { "AssessmentResultKey", "Result", "text-left" },
        new[] { "CreatedOn", "Due Date", "text-left"},
        new[] { null, "Action", "text-center valign-middle" },
        new[] { null, "Documents", "text-center valign-middle" }

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Assessment";

    ViewBag.HideAddNewButton = true;
    ViewBag.StatusNames = dataContext.Table<ValueList>().QueryRecords("ID", restriction: new RecordRestriction("GroupID = 1")).ToArray();
    ViewBag.StatusCounts = dataContext.Table<ValueList>().QueryRecordCount(new RecordRestriction("GroupID = 1"));
    ViewBag.BUNames = dataContext.Table<BusinessUnit>().QueryRecords("Name", restriction: new RecordRestriction("IsDeleted = 0")).ToArray();
    ViewBag.BUCounts = dataContext.Table<BusinessUnit>().QueryRecordCount(new RecordRestriction("IsDeleted = 0"));
}
@section StyleSheets{
@Styles.Render("~/css.bundle/fileinput")


<style>
    .actions {
        border-style: solid;
        border-width: 1.5px;
        border-color:darkgrey;
        border-radius: 2px;
        width: 100%;
        height: fit-content;
    }
</style>
}
@helper Filters()
{
    <div class='row'>
        <div class='col-md-4'>
            <div class='form-group'>
                <label for='patchidfilter'>Patch ID Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='patchidfilter' placeholder='Search' onkeyup='filter()' />
                </div>
            </div>
        </div>
        <div class='col-md-4'>
            <div class='form-group'>
                <label for='productfilter'>Product Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='productfilter' placeholder='Search' onkeyup='filter()' />
                </div>
            </div>
        </div>
        <div class='col-md-4'>
            <div class='form-group'>
                <label for='vendorfilter'>Vendor Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='vendorfilter' placeholder='Search' onkeyup='filter()' />
                </div>
            </div>
        </div>
    </div>
    <div class='row'>
        <div class='col-md-4'>
            <label for='statusfilter'>Status Filter:</label>
            <select class='form-control' id='statusfilter' onchange='filter()'>
                <option value='all'>All</option>
                @for (int i = 0; i < ViewBag.StatusCounts; ++i)
                {
                    var str = "<option value='" + ViewBag.StatusNames[i].ID + "'>" + ViewBag.StatusNames[i].Text + "</option>";
                    @Html.Raw(str)
                }
            </select>
        </div>
        <div class='col-md-4'>
            <label for='bufilter'>Business Unit Filter:</label>
            <select class='form-control' id='bufilter' onchange='filter()'>
                <option value='none' selected>None</option>
                <option value='mine'>My Assessments</option>
                @for (int i = 0; i < ViewBag.BUCounts; ++i)
                {
                    var str = "<option value='" + ViewBag.BUNames[i].Abbreviation + "'>" + ViewBag.BUNames[i].Name + "</option>";
                    @Html.Raw(str)
                }
            </select>
        </div>
        <div class='col-md-2'>
            <label for='startdate'>Start Date Filter:</label>
            <input type='text' id='startdate' onchange='filter()' />
        </div>
        <div class='col-md-2'>
            <label for='enddate'>End Date Filter:</label>
            <input type='text' id='enddate' onchange='filter()' />
        </div>
    </div>
}
@helper BodyRows()
{
    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getStatusImage($($element), $data)}"></td>
    <td width="10%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: VendorPatchName, click: $parent.viewPageRecord"></button></td>
    <td width="10%" class="text-left valign-middle"><div nowrap data-bind="text: Name"></div></td>
    <td width="25%" class="text-left valign-middle"><div nowrap data-bind="text: Title"></div></td>
    <td width="10%" class="text-left valign-middle"><div nowrap data-bind="text: lookupAssessactionValue(AssessmentResultKey)"></div></td>
    <td width="10%" class="text-left valign-middle"><div nowrap data-bind="text: getDueDate(CreatedOn)"></div></td>
    <td width="30%" class="text-center valign-middle">
        <button type="button" data-bind="click: $parent.addPageRecord.bind($data), visible: $parent.canAddNew() && $parent.dataHubIsConnected() " class="btn btn-danger btn-sm">Create Plan</button>
        <button type="button" data-bind="click: $parent.editPageRecord.bind($data), visible: $parent.canEdit() && $parent.dataHubIsConnected()" class="btn btn-danger btn-sm">Reassess</button>
    </td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(ID, $($element)), attr: {id: 'documentCount' + ID}">0</span></button></td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="row">
        <div class="col-md-6">
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("Title", fieldLabel: "Patch Title"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("VendorPatchName", fieldLabel: $"{Model.Global.CompanyAcronym} Patch Identifier"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("VendorName", fieldLabel: "Vendor"))
        </div>
        <div class="col-md-6">
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("PlatformName", fieldLabel: "Product"))
            @Html.Raw(dataContext.AddInputField<AssessmentMitigateView>("Name", fieldLabel: "Business Unit"))
        </div>
        <div class="col-md-12">
            @Html.Raw(dataContext.AddTextAreaField<AssessmentMitigateView>("PatchDetails", fieldLabel: "Patch Details"))
            <div data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
                <button type="submit" class="btn btn-primary" id="template">Get Mitigation Plan Template</button>
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="uploadFiles">Add Mitigation Plan Related Documents:</label>
                        <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
                    </div>
                </div>

                @*<div>
                    <h4>Mitigation Plan Form</h4>
                    <div>Mitigation Plan Instructions:
                        <ol>
                            <li>SME: complete this form in its entirety. <b>Specific dates are required, and all fields are required in order to meet NERC CIP minimum requirements.</b> Add additional “Action Items” as needed.</li>
                            <li>SME: E-mail completed document to the SME Supervisor.</li>
                            <li>SME Supervisor: Document approval in an e-mail and send approval e-mail and completed form to ot-patches@tva.gov.</li>
                            <li>Patch Intake Coordinator: Attach completed documents to Mitigation Plan in OpenSPM.</li>
                        </ol>
                        <div class="col-md-6">
                            <div class="col-md-6">
                                <label>Plan Author</label>
                            </div>
                            <div class="col-md-6">
                                <input type="text" id="planAuthor" class="form-control" placeholder="Name"/>
                            </div>
                            <div class="col-md-6">
                                <label>Plan Approver & Owner</label>
                            </div>
                            <div class="col-md-6">
                                <input type="text" id="planOwner" class="form-control" placeholder="Owner"/>
                            </div>
                            <div class="col-md-6">
                                <label>PAN Reference #</label>
                            </div>
                            <div class="col-md-6">
                                <input type="text" id="panRef" class="form-control" placeholder="PAN #"/>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="col-md-6">
                                <label>Approval Date</label>
                            </div>
                            <div class="col-md-6">
                                <div class="input-group date" data-provide="datepicker">
                                    <input type="text" class="form-control" id="approvalDate" placeholder="Click here to enter a date.">
                                    <div class="input-group-addon">
                                        <span class="glyphicon glyphicon-th"></span>
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="col-md-12">
                            <div class="col-md-3">
                                <label>Summary</label>
                            </div>
                            <div class="col-md-9">
                                <textarea id="mitigationSummary" class="form-control" placeholder="Click here to enter text."></textarea>
                            </div>
                            <div id="actionWindow"></div>
                        </div>

                    </div>
                </div>*@
            </div>

        </div>

    </div>

    <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.Edit">
        <div class="col-md-12">
            @Html.Raw(Model.AddValueListSelectField<AssessmentMitigateView>("AssessmentResultKey", "assessAction", fieldLabel: "Assessment Result"))
            @Html.Raw(dataContext.AddTextAreaField<AssessmentMitigateView>("Details"))
        </div>
    </div>

}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
@Scripts.Render("~/js.bundle/fileinput")
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<AssessmentMitigateView>(ViewBag))
        @Html.Raw(Model.RenderValueListClientLookupFunction("assessAction", "Abbreviation"))
        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=MitigationPlanDocument&SourceField=MitigationPlanID"))";
        $(function() {

            $("#pageHeader").append("@Html.Raw(Filters().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");

            $( function() {
                $( "#startdate" ).datepicker();
            } );

            $( function() {
                $( "#enddate" ).datepicker();
            } );

            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });


            var numberOfActions = 0;
            $('#addNewEditDialog').on("shown.bs.modal",function(){
                
                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12, 
                    uploadExtraData: function(){
                        return {SourceID: MitigationPlanID};
                    }
                });

                $('#inputTitle').prop('disabled', true);
                $('#inputVendorPatchName').prop('disabled', true);
                $('#inputVendorName').prop('disabled', true);
                $('#inputName').prop('disabled', true);
                $('#inputPlatformName').prop('disabled', true);
                $('#textPatchDetails').prop('disabled', true);

                $('#template').on('click', function(event){
                    event.preventDefault();
                    window.open('@Url.Content("~/Docs/MitigationPlanTemplate.dotx")')

                });
                //$('#addNewEditDialog .modal-footer').prepend('<button class="btn btn-primary" id="addActionButton">Add Action</button>');

                //$('#addActionButton').off('click');
                //$('#addActionButton').on('click', function(){
                //    $('#actionWindow').append("<hr><div id='action" + numberOfActions++ +"' class='actions'>"+
                //                                    "<div class='col-md-3'>"+
                //                                        "<label>Action Item #" + numberOfActions + "</label>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-9'>"+
                //                                        "<textarea id='actionItemSummary' class='form-control' placeholder='Please enter a summary.'></textarea>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-3'>"+
                //                                        "<label>Status</label>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-3'>"+
                //                                        "<select id='statusSelect' class='form-control'><option>Pending</option><option>Complete</option></select>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-3'>"+
                //                                        "<label>Scheduled Completion Date</label>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-3'>"+
                //                                        "<div class='input-group date' data-provide='datepicker'>" +
                //                                            "<input type='text' class='form-control' id='completionDate' placeholder='click here to enter a date.'>" +
                //                                            "<div class='input-group-addon'>" +
                //                                                "<span class='glyphicon glyphicon-th'></span>"+
                //                                            "</div>"+
                //                                        "</div>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-12'><div class='col-md-3'>"+
                //                                        "<label>Action Item Assigned To</label>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-3'>"+
                //                                        "<input id='actionAssignment' placeholder='Click here to enter text.' class='form-control'/>" +
                //                                    "</div></div>" +
                //                                    "<div class='col-md-3'>"+
                //                                        "<label>Detailed Notes</label>" +
                //                                    "</div>" +
                //                                    "<div class='col-md-9'>"+
                //                                        "<textarea id='detailedNotes' class='form-control' placeholder='Click her to enter text.'></textarea>" +
                //                                    "</div>" +
                //                              "</div><hr>");
                //});
            });

            $('#addNewEditDialog').on("hidden.bs.modal",function(){
                $('#addActionButton').off('click');
                $('#addActionButton').remove();
                numberOfActions = 0;
            });
        });

        function getTemplate(){
        }

        function getDueDate(day) {
            var newdate = new Date(day.toDate().getTime() + 35 * 24 * 60 * 60 * 1000);
            var date = newdate.getDate();
            var month = newdate.getMonth() + 1;
            var year = newdate.getFullYear();
            var processeddate = month + '/' + date + '/' + year;
            //console.log(processeddate);
            return processeddate;
        }

        function getStatusImage(element, record) {

            var alarmDayLimits = @Html.Raw(ViewBag.alarmDayLimits);
            const critcalAlarmDays = alarmDayLimits[0].Value;
            const warningDays = alarmDayLimits[1].Value;
            const alarmDays = alarmDayLimits[2].Value;
            const violationDays = alarmDayLimits[3].Value;
            const daysUntilDeadline =  violationDays + (record.CreatedOn.toDate()).daysBetween(new Date());

            var image, title;
            switch (true) {
                case (daysUntilDeadline <= violationDays - violationDays):
                    image = "@violationImage";
                    title = "Violation";
                    break;
                case (daysUntilDeadline <= critcalAlarmDays):
                    image = "@criticalAlarmImage";
                    title = "Critical Alarm";
                    break;
                case (daysUntilDeadline <= violationDays - alarmDays):
                    image = "@alarmImage";
                    title = "Alarm";
                    break;
                case (daysUntilDeadline <= violationDays - warningDays):
                    image = "@warningImage";
                    title = "Warning";
                    break;
                default:
                    image = "@noneImage";
                    title = "OK";
                    break;
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }


        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("Assessment", sourceID, null).done(function (count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function () {
            setTimeout(function () {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.ID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=Assessment&SourceField=AssessmentID&SourceID=" + record.ID + "&Name=" + encodeURIComponent(record.VendorPatchName),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        $(viewModel).on("newRecord", function(event, newRecord, oldRecord){
            newRecord.PatchStatusID = oldRecord.PatchStatusID;
            newRecord.VendorPatchName = oldRecord.VendorPatchName;
            newRecord.Name = oldRecord.Name;
            newRecord.PlatformName = oldRecord.PlatformName;
            newRecord.BusinessUnitID = oldRecord.BusinessUnitID;
            newRecord.PatchStatusKey = oldRecord.PatchStatusKey;
            newRecord.Title = oldRecord.Title;
            newRecord.VendorName = oldRecord.VendorName;
            newRecord.PatchDetails = oldRecord.PatchDetails;
        });
        
        $(viewModel).on("beforeSave", function (event, observableRecord) {
            selectedFiles = $("#uploadFiles").fileinput("getFileStack");
        });

        function filter() {

            if ($('#patchidfilter').val().length + $('#productfilter').val().length + $('#vendorfilter').val().length + $('#startdate').val().length + $('#enddate').val().length == 0 && $('#statusfilter').val() == 'all' && $('#bufilter').val() == 'none' ) {
                viewModel.filterText =  "%";
                viewModel.queryPageRecords();
            }else {
                var MyMitPlans = false;
                var filterStatus = false;
                var buFilter = '%';

                if($('#statusfilter').val() != 'all'){
                    filterStatus = true;
                }
                if($('#bufilter').val() == 'mine'){
                    MyMitPlans = true;
                }else{
                    if ($('#bufilter').val() != 'none'){
                        buFilter = $('#bufilter').val();
                    }
                }
                viewModel.filterText = "FilterStatus=" + filterStatus.toString() + "; MyMitPlans=" + MyMitPlans.toString() +  "; Filter=" + $('#patchidfilter').val() + ',' + $('#productfilter').val() + ',' + $('#vendorfilter').val() + ',' + $('#statusfilter').val() + ',' +buFilter + ',' + $('#startdate').val() + ',' + $('#enddate').val();
                viewModel.queryPageRecords();
            }

        }

        var MitigationPlanID;
        var selectedFiles;

        $(viewModel).on("recordSaved", function(event, record, newRecord){
            // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
            if (viewModel.dataHubIsConnected()) {
                if (newRecord) {
                            dataHub.getLastMitigationPlanID().done(function(planID) {
                                MitigationPlanID = planID.toString();
                                $("#uploadFiles").fileinput({
                                    uploadUrl: fileUploadUrl + "&SourceID=" + planID.toString(),
                                    uploadAsync: true
                                });

                                for (var i = 0; i < selectedFiles.length; i++) {
                                    $("#uploadFiles").fileinput("addToStack", selectedFiles[i]);
                                }

                                $("#uploadFiles").fileinput("upload");


                            });


                }
            }
        });
    </script>
}