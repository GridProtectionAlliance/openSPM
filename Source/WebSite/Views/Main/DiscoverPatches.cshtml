@*******************************************************************************************************
//  DiscoverPatches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/03/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF
@using GSF.Web.Model
@using openSPM.Model
@model openSPM.Model.AppModel
@{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> appSettings = Model.Global.ApplicationSettings;
    int discoveryWarningDays, discoveryAlarmDays, discoveryViolationDays;
    string setting;

    const string okImage = "greenlight.png";
    const string warningImage = "yellowlight.png";
    const string alarmImage = "redlight.png";
    const string violationImage = "blacklight.png";

    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');

    if (!appSettings.TryGetValue("discoveryWarningDays", out setting) || !int.TryParse(setting, out discoveryWarningDays)) {
        discoveryWarningDays = 7;
    }

    if (!appSettings.TryGetValue("discoveryAlarmDays", out setting) || !int.TryParse(setting, out discoveryAlarmDays)) {
        discoveryAlarmDays = 21;
    }

    if (!appSettings.TryGetValue("discoveryViolationDays", out setting) || !int.TryParse(setting, out discoveryViolationDays)) {
        discoveryViolationDays = 35;
    }

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "Name", "Company", "text-center" },
        new[] { "Company", "Full Corporate Name", "text-left" },
        new[] { "ReviewDate", "Last&nbsp;Review&nbsp;Date", "text-center" },
        new[] { null, "", ""},
        new[] { null, "Documents", "text-center valign-middle" }
    };

    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{

    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getDiscoveryStatusImage($($element), $data)}"></td>
    <td width="30%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Company, 1.5), attr: {title: Company}"></div></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: ReviewDate.formatDate(DateFormat)"></td>
    <td width="10%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click: addNewDiscoveryResult.bind($data), enable: $parent.canAddNew() && $parent.dataHubIsConnected()">Update...</button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(DiscoveryResultID, $($element)), attr: {id: 'documentCount' + DiscoveryResultID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()" title="Only the latest discovered patch will be deleted..."><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
        @Html.Raw(dataContext.AddDateField<LatestVendorDiscoveryResult>("ReviewDate"))
        @Html.Raw(Model.AddValueListSelectField<LatestVendorDiscoveryResult>("ResultKey", "discoveryResult", initialFocus: true))
        @Html.Raw(dataContext.AddTextAreaField<LatestVendorDiscoveryResult>("Notes", 4))
    </div>
}
@Html.Partial("PagedViewModel")

<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<LatestVendorDiscoveryResult>(ViewBag, "-ReviewDate"))
        var currentVendorID = 0;
        $(function () {
            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });
        });
        function addNewDiscoveryResult(record) {
            currentVendorID = record.VendorID;
            viewModel.addPageRecord();
        }

        $(viewModel).on("newRecord", function (event, newRecord) {
            // Make sure new records get assigned current vendor ID
            newRecord.VendorID = currentVendorID;
        });

        const discoveryWarningDays = @discoveryWarningDays;
        const discoveryAlarmDays = @discoveryAlarmDays;
        const discoveryViolationDays = @discoveryViolationDays;

        function getDiscoveryStatusImage(element, record) {
            const daysSinceLastReview = (new Date()).daysBetween(record.ReviewDate.toDate());
            var image, title;

            switch (true) {
                case (daysSinceLastReview >= discoveryViolationDays):
                    image = "@violationImage";
                    title = "Violation";
                    break;
                case (daysSinceLastReview >= discoveryAlarmDays):
                    image = "@alarmImage";
                    title = "Alarm";
                    break;
                case (daysSinceLastReview >= discoveryWarningDays):
                    image = "@warningImage";
                    title = "Warning";
                    break;
                default:
                    image = "@okImage";
                    title = "OK";
                    break;
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }

        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("DiscoveryResult", sourceID).done(function (count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.ID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=DiscoveryResult&SourceField=DiscoveryResultID&SourceID=" + record.DiscoveryResultID + "&Name=" + encodeURIComponent(record.PatchMnemonic),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
        });

        $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });
    </script>
}