@*******************************************************************************************************
//  DiscoverPatches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/03/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@using openSPM.Model
@model AppModel
@section StyleSheets {
    @Styles.Render("~/css.bundle/fileinput")
}
@{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> appSettings = Model.Global.ApplicationSettings;
    string statusLightsImagePath;
    string value;

    const string okImage = "greenlight.png";
    const string warningImage = "yellowlight.png";
    const string alarmImage = "redlight.png";
    const string violationImage = "blacklight.png";

    int groupID = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM ValueListGroup WHERE Name = 'discoveryDayLimits'") ?? 0;
    ViewBag.discoveryDayLimits = Json.Encode(dataContext.Table<ValueList>().QueryRecords(restriction: new RecordRestriction("GroupID = {0}", groupID)).ToArray());

    if (!appSettings.TryGetValue("statusLightsImagePath", out value))
    {
        statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
        statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');
    }
    else
    {
        statusLightsImagePath = value;
    }


    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "ProductName", "Product", "text-cent"},
        new[] { "Company", "Vendor", "text-left" },
        new[] { "ReviewDate", "Last&nbsp;Review&nbsp;Date", "text-center" },
        new[] { null, "", ""},
        new[] { null, "Documents", "text-center valign-middle" }
    };

    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Product Details";
    ViewBag.CanEdit = false;
}
@helper VendorFilter()
{
    <div class='row'>
        <div class='col-md-6'>
            <div class='form-group'>
                <label for='platformfilter'>Product Name Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='platformfilter' placeholder='Search' />
                </div>
            </div>
        </div>

        <div class='col-md-6'>
            <div class='form-group'>
                <label for='vendorfilter'>Vendor Name Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='vendorfilter' placeholder='Search'/>
                </div>
            </div>
        </div>
    </div>

}


@helper BodyRows()
{
    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getDiscoveryStatusImage($($element), $data)}"></td>
    <td width="15%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: ProductName, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Company, 1.5), attr: {title: Company}"></div></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: ReviewDate.formatDate(DateFormat)"></td>
    <td width="10%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click: addNewDiscoveryResult.bind($data), enable: $parent.canAddNew() && $parent.dataHubIsConnected()">Update...</button></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(DiscoveryResultID, $($element)), attr: {id: 'documentCount' + DiscoveryResultID}">0</span></button></td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="row">
        <div data-bind="css: ($parent.recordMode()==RecordMode.View? 'col-md-4' : 'col-md-12')">
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ProductName", initialFocus: true, fieldLabel: "Product", customDataBinding: "enable: false"))
            <div data-bind="visible: $parent.recordMode()==RecordMode.View ">
                @Html.Raw(Model.AddValueListSelectField<LatestProductDiscoveryResult>("VendorTypeKey", "vendorType", fieldLabel: "Vendor Type"))
                @Html.Raw(dataContext.AddInputField<Vendor>("PatchCadence"))
                @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("Abbreviation"))
            </div>
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("Company", customDataBinding: "enable: false"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("Link", "url", customDataBinding: "html: renderHotLinks(notNull(Link())), enable: false"))
            @Html.Raw(dataContext.AddTextAreaField<LatestProductDiscoveryResult>("Description", 5, customDataBinding: "html: renderHotLinks(notNull(Description())), enable: false"))
        </div>
        <div class="col-md-4" data-bind="visible: $parent.recordMode()==RecordMode.View ">
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("Address1"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("Address2"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("City"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("State"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ZIP"))
            @Html.Raw(Model.AddValueListSelectField<LatestProductDiscoveryResult>("NoticeMethodKey", "noticeMethod"))
            @Html.Raw(dataContext.AddTextAreaField<LatestProductDiscoveryResult>("VendorNotes", 4))
        </div>
        <div class="col-md-4" data-bind="visible: $parent.recordMode()==RecordMode.View ">
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactName1"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactEmail1"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactPhoneOfc1"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactPhoneCell1"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactName2"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactEmail2"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactPhoneOfc2"))
            @Html.Raw(dataContext.AddInputField<LatestProductDiscoveryResult>("ContactPhoneCell2"))
        </div>

       
    </div>
    <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
        <div class="col-md-12">
            @Html.Raw(dataContext.AddDateField<LatestProductDiscoveryResult>("ReviewDate"))
            @Html.Raw(Model.AddValueListSelectField<LatestProductDiscoveryResult>("ResultKey", "discoveryResult", initialFocus: true))
            @Html.Raw(dataContext.AddTextAreaField<LatestProductDiscoveryResult>("Notes", 4))
        </div>
        <div class="col-md-12">
            <div class="form-group">
                <label for="uploadFiles">Discovery Result Related Documents:</label>
                <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
            </div>
        </div>
    </div>


}
@Html.Partial("PagedViewModel")

<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/js.bundle/fileinput")
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<LatestProductDiscoveryResult>(ViewBag, "-ReviewDate"))

        var currentVendorID = 0;
        var currentProductID = 0;
        var currentProductName ="";
        var currentProductLink = "";
        var currentProductDetails = "";
        var currentVendorName = "";
      

        function addNewDiscoveryResult(record) {
            currentVendorID = record.VendorID;
            currentProductID = record.ProductID;
            currentProductName = record.ProductName;
            currentProductLink = record.Link;
            currentProductDetails = record.Description;
            currentVendorName = record.Company;
            viewModel.addPageRecord();
        }

        $(viewModel).on("newRecord", function (event, newRecord) {
            // Make sure new records get assigned current vendor ID
            newRecord.VendorID = currentVendorID;
            newRecord.ProductID = currentProductID;
            newRecord.Link = currentProductLink;
            newRecord.ProductName = currentProductName;
            newRecord.Company = currentVendorName;
            newRecord.Description = currentProductDetails;
        });
        var discoveryDays = @Html.Raw(ViewBag.discoveryDayLimits);

        const discoveryWarningDays = discoveryDays[0].Value;
        const discoveryAlarmDays = discoveryDays[1].Value;
        const discoveryViolationDays = discoveryDays[2].Value;

        function getDiscoveryStatusImage(element, record) {
            const daysSinceLastReview = (new Date()).daysBetween(record.ReviewDate.toDate());
            var image, title;

            switch (true) {
                case (daysSinceLastReview >= discoveryViolationDays):
                    image = "@violationImage";
                    title = "Violation";
                    break;
                case (daysSinceLastReview >= discoveryAlarmDays):
                    image = "@alarmImage";
                    title = "Alarm";
                    break;
                case (daysSinceLastReview >= discoveryWarningDays):
                    image = "@warningImage";
                    title = "Warning";
                    break;
                default:
                    image = "@okImage";
                    title = "OK";
                    break;
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }

        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount('DiscoveryResult', sourceID, null).done(function (count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.DiscoveryResultID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame").attr({
                "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=DiscoveryResult&SourceField=DiscoveryResultID&SourceID=" + record.DiscoveryResultID + "&Name=" + encodeURIComponent(record.Name),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=DiscoveryResultDocument&SourceField=DiscoveryResultID"))";
        var selectedFiles;

        $(viewModel).on("beforeSave", function(event, observableRecord) {
            selectedFiles = $("#uploadFiles").fileinput("getFileStack");
        });

        $(viewModel).on("recordSaved", function(event, record, newRecord) {
            if (newRecord && selectedFiles.length > 0 && viewModel.dataHubIsConnected()) {
                dataHub.getLastDiscoveryResultID().done(function(discoveryResultID) {
                    $("#uploadFiles").fileinput({
                        uploadUrl: fileUploadUrl + "&SourceID=" + discoveryResultID.toString(),
                        uploadAsync: true
                    });

                    for (var i = 0; i < selectedFiles.length; i++) {
                        $("#uploadFiles").fileinput("addToStack", selectedFiles[i]);
                    }

                    $("#uploadFiles").fileinput("upload");
                });
            }
        });

        $(function () {
            $("#pageHeader").append("@Html.Raw(VendorFilter().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");


            $('#vendorfilter').on('keyup', function (e) {
                if ($('#vendorfilter').val().length == 0) {
                    viewModel.filterText = '%';
                    viewModel.filterPageRecords();
                } else {
                    viewModel.filterText = $('#platformfilter').val() + ';' + $('#vendorfilter').val();
                    viewModel.filterPageRecords();

                }

            });
            
            $('#platformfilter').on('keyup', function (e) {
                if ($('#platformfilter').val().length == 0) {
                    viewModel.filterText = '%';
                    viewModel.filterPageRecords();
                } else {
                    viewModel.filterText =  $('#platformfilter').val() + ';' + $('#vendorfilter').val();
                    viewModel.filterPageRecords();

                }

            });


            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });
            $("#addNewEditDialog").on("shown.bs.modal", function() {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
               
                if(viewModel.recordMode() === RecordMode.AddNew){
                    $('#inputLink').hide();
                    $('#readonlyinputLink').show();
                    $('#textDescription').hide();
                    $('#readonlytextDescription').show();
                }

                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12
                });
            });
        });
    </script>
}