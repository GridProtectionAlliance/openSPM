@*******************************************************************************************************
//  Documents.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  04/09/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using GSF.Web.Model
@using openSPM.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;
    NameValueCollection parameters = Request.QueryString;
    string parentTable = parameters["source"];
    int parentID = int.Parse(parameters["ID"] ?? "0");

    if (string.IsNullOrEmpty(parentTable) || parentID < 1)
    {
        throw new ArgumentException("Expected page parameters are missing or invalid");
    }

    ViewBag.CustomTitle = parentTable + " Documents";
    ViewBag.PageHasMenu = false;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Text", "Menu Text", "text-left" },
        new[] { "Link", "URL", "text-left" },
        new[] { "SortOrder", "Sort&nbsp;Order", "text-center" }
    };

    ViewBag.HideUnauthorizedControls = true;
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
    <td width="80%" class="text-left table-cell-hard-wrap"><a data-bind="attr:{href: notNull(Filename)}" target="_blank"><div data-bind="text: $($element.parentElement.parentElement).truncateToWidth(Filename, 2)"></div></a></td>
    <td width="15%" class="text-center valign-middle" data-bind="text: lookupFileTypeValue(DocumentTypeKey)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
        <input id="uploadFiles" type="file">
    </div>
}
@Html.Partial("PagedViewModel")
@section Scripts {
    <script>
        "use strict";
        @Html.Raw(Model.RenderViewModelConfiguration<Document>(ViewBag))
        @Html.Raw(Model.RenderValueListClientLookupFunction("fileType"))

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function() {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editDocumentsDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();

                $("#uploadFiles").fileinput({
                    uploadUrl: "@Url.Content("~/FileUploadHandler.ashx")",
                    uploadAsync: true
                });
            });

            $("#addNewEditDialog").on("hidden.bs.modal", function() {
                // On add/edit dialog hidden, re-enable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editDocumentsDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.visible();
                dismissButtons.prop("disabled", false);
            });
        });
    </script>
}