@*******************************************************************************************************
//  Done.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/03/2016 - Russell Robertson
//       Generated original version of source code.
//
//*****************************************************************************************************@

@using GSF.Web.Model
@using openSPM.Model
@using GSF
@model openSPM.Model.AppModel
@section StyleSheets {
    @Styles.Render("~/css.bundle/fileinput")
}


@{
    DataContext dataContext = Model.DataContext;

    ViewBag.HeaderColumns = new[]
{
        //    { "Field", "Label", "Classes" }
        new[] { "PatchStatusID", "Patch ID", "text-left" },
        new[] { "BusinessUnitID", "Business Unit", "text-left"},
        new[] { null, "Action Taken", "text-left valign-middle"},
        new[] { "CompletionDate", "Completion Date", "text-center"},
        new[] { null, "Platform", "text-center valign-middle"},
        new[] { null, "Action", "text-center valign-middle"}
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = true;
}

@helper PatchFilter()
{
    <div class='row'>
        <div class='col-md-12'>
            <div class='form-group'>
                <label for='patchfilter'>Patch ID Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='patchfilter' placeholder='Search' />
                </div>
            </div>
        </div>
    </div>
}


@helper BodyRows()
{


    <td width="15%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: VendorPatchName, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle"><div nowrap data-bind="text: BusinessUnitName"></div></td>
    <td width="20%" class="text-left valign-middle"><div nowrap data-bind="text: lookupAssessactionValue(AssessmentResultKey)"></div></td>
    <td width="15%" class="text-center valign-middle"><div nowrap data-bind="text: CompletionDate.formatDate(DateFormat)"></div></td>
    <td width="15%" class="text-center valign-middle"><div nowrap data-bind="text: PlatformName"></div></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click:  $parent.addPageRecord.bind($data), visible: $parent.canAddNew() && $parent.dataHubIsConnected()">Close</button></td>
    @*<td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(ID, $($element)), attr: {id: 'documentCount' + ID}">0</span></button></td>*@
    @*<td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>*@
}

@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="row">
        <div class="col-md-12">
            
            @Html.Raw(dataContext.AddInputField<ClosingReviewView>("Title", fieldLabel: "Patch Title"))                    
            @Html.Raw(dataContext.AddInputField<ClosingReviewView>("VendorPatchName", fieldLabel: $"{Model.Global.CompanyAcronym} Patch Identifier"))
            @Html.Raw(dataContext.AddInputField<ClosingReviewView>("VendorName", fieldLabel: "Vendor"))
            @Html.Raw(dataContext.AddInputField<ClosingReviewView>("PlatformName", fieldLabel: "Product"))
            @Html.Raw(dataContext.AddInputField<ClosingReviewView>("BusinessUnitName", fieldLabel: "Business Unit"))
            @Html.Raw(dataContext.AddTextAreaField<ClosingReviewView>("PatchDetails", fieldLabel: "Patch Details"))
            @Html.Raw(Model.AddValueListSelectField<ClosingReviewView>("AssessmentResultKey", "assessAction", fieldLabel: "Assessment Result"))
            @Html.Raw(dataContext.AddDateField<ClosingReviewView>("CompletionDate", fieldLabel: "Completion Date"))
            <div data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
                @Html.Raw(dataContext.AddTextAreaField<ClosingReviewView>("Details"))
            </div>
            <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="uploadFiles">Add Installation Related Documents:</label>
                        <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@Html.Partial("PagedViewModel")
@section Scripts {
@Scripts.Render("~/js.bundle/fileinput")
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<ClosingReviewView>(ViewBag))
        @Html.Raw(Model.RenderValueListClientLookupFunction("assessAction", "Abbreviation"))
        
        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=ClosedPatchDocument&SourceField=ClosedPatchID"))";
        var ClosedPatchID;
        var selectedFiles;

        $(viewModel).on("newRecord", function (event, newRecord, oldRecord) {
            newRecord.ID = oldRecord.ID;
            newRecord.VendorPatchName = oldRecord.VendorPatchName;
            newRecord.BusinessUnitName = oldRecord.BusinessUnitName;
            newRecord.BusinessUnitID = oldRecord.BusinessUnitID;
            newRecord.AssessmentResultKey = oldRecord.AssessmentResultKey;
            newRecord.PatchStatusKey = oldRecord.PatchStatusKey;
        });

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            selectedFiles = $("#uploadFiles").fileinput("getFileStack");
        });

        $(viewModel).on("recordSaved", function (event, record, newRecord) {
            // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
            if (viewModel.dataHubIsConnected()) {
                if (newRecord) {
                    dataHub.getLastClosedPatchID().done(function (id) {
                        ClosedPatchID = id.toString();
                        $("#uploadFiles").fileinput({
                            uploadUrl: fileUploadUrl + "&SourceID=" + id.toString(),
                            uploadAsync: true
                        });

                        for (var i = 0; i < selectedFiles.length; i++) {
                            $("#uploadFiles").fileinput("addToStack", selectedFiles[i]);
                        }

                        $("#uploadFiles").fileinput("upload");

                    });

                    ++record.PatchStatusKey;
                    dataHub.updatePatchStatusKey(record.ID, record.PatchStatusKey).done(function () {
                        viewModel.queryPageRecords();
                    });
                }
            }
        });
     
        $(function () {
            
            $("#pageHeader").append("@Html.Raw(PatchFilter().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");
            
            $('#patchfilter').on('keyup', function (e) {
                if ($('#patchfilter').val().length == 0) {
                    viewModel.filterText = '%';
                    viewModel.filterPageRecords();
                } else {
                    viewModel.filterText = $('#patchfilter').val();
                    viewModel.filterPageRecords();

                }

            });

            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });
 
            $('#addNewEditDialog').on("shown.bs.modal", function () {

                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12,
                    uploadExtraData: function () {
                        return { SourceID: ClosedPatchID };
                    }
                });

                $('#inputTitle').prop('disabled', true);
                $('#inputVendorPatchName').prop('disabled', true);
                $('#inputVendorName').prop('disabled', true);
                $('#inputPlatformName').prop('disabled', true);
                $('#inputBusinessUnitName').prop('disabled', true);
                $('#selectAssessmentResultKey').prop('disabled', true);
                $('#dateCompletionDate').prop('disabled', true);
            });
        });
    </script>
}

