@*******************************************************************************************************
    //  Patches.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  02/20/2016 - Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Text
@using openSPM.Models
@model AppModel
@{
    ViewBag.PageName = "Patch";
    ViewBag.PageControlScripts = new StringBuilder();

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "PatchReference", "SPM&nbsp;Reference", "text-center" },
        new[] { "ImpactKey", "Impact", "text-center" },
        new[] { "Title", "Title", "text-left" },
        new[] { null, "Patch&nbsp;Status", "text-center valign-middle" },
        new[] { "SourceReleaseDate", "Release&nbsp;Date", "text-center" }
    };

    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;
    
    //ViewBag.EditRoles = "Test";
    ViewBag.EditRoles = "Administrator, Editor, PIC";
    ViewBag.DeleteRoles = "Administrator, Editor";

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();

    // TODO: Move into model located render function
    DataContext dataContext = Model.DataContext;
    int impactKey = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM ValueListGroup WHERE Name='impact' AND Enabled <> 0") ?? 0;

}
@helper BodyRows()
{
    string statusLightsPath = Model.Global.PageDefaultSettings["statusLightsPath"] ?? "/Images/StatusLights/Small/";

    <td width="5%" class="text-center valign-middle"><img src="@(statusLightsPath)greenlight.png" alt="Enabled" data-bind="visible: IsNotCompliance"><img src="@(statusLightsPath)disabledlight.png" alt="Disabled" data-bind="visible: !IsNotCompliance"></td>
    <td width="15%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: PatchReference, click: $parent.viewPageRecord"></button></td>
    <td width="15%" class="text-center valign-middle" data-bind="text: lookupImpactValue(ImpactKey)"></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Title, 1.5), attr: {title: Title}"></div></td>
    <td width="10%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm">Start...</button></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: VendorReleaseDate.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog()
{
    DataContext dataContext = Model.DataContext;

    <div class="col-md-4">
        @Html.Raw(dataContext.AddInputField<Patch>("PatchReference"))
        @Html.Raw(dataContext.AddSelectField<Patch, Patch>("ParentID", "ID", "PatchReference"))
        @*@Html.Raw(dataContext.AddSelectField<Patch, Vendor>("VendorID", "ID", "Name"))*@
        @Html.Raw(dataContext.AddInputField<Patch>("VendorReference"))
        @Html.Raw(dataContext.AddDateField<Patch>("VendorReleaseDate"))
        @Html.Raw(Model.AddValueListSelectField<Patch>("ImpactKey", "impact"))
    </div>
    <div class="col-md-4">
        @Html.Raw(dataContext.AddInputField<Patch>("Title"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Target"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Summary"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Detail", 3))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Citations"))
    </div>
    <div class="col-md-4">
        @Html.Raw(dataContext.AddTextAreaField<Patch>("WorkArounds"))
        @Html.Raw(dataContext.AddInputField<Patch>("Link", "url"))
        @Html.Raw(dataContext.AddInputField<Patch>("AlarmCriticalDays"))
        @Html.Raw(dataContext.AddInputField<Patch>("SMEGroupID"))
        @Html.Raw(dataContext.AddCheckBoxField<Patch>("IsNotCompliance"))
    </div>
}
@Html.Partial("PagedViewModel")
@section Scripts {
    @Html.Raw(ViewBag.PageControlScripts.ToString())
    <script>
        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "PatchReference";
        viewModel.primaryKeyFields = ["ID"];
        viewModel.initialFocusField = "inputPatchReference";

        viewModel.setQueryRecordCount(function() {
            return dataHub.queryPatchCount();
        });

        viewModel.setQueryRecords(function(sortField, ascending, page, pageSize) {
            return dataHub.queryPatches(sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function(keyValues) {
            return dataHub.deletePatch(keyValues[0]);
        });

        viewModel.setNewRecord(function() {
            return dataHub.newPatch();
        });

        viewModel.setAddNewRecord(function(record) {
            return dataHub.addNewPatch(record);
        });

        viewModel.setUpdateRecord(function(record) {
            return dataHub.updatePatch(record);
        });

        // Define Javascript based impact value lookup function
        var impactValues = [];

        @foreach (ValueList valueList in dataContext.QueryRecords<ValueList>("SELECT ID FROM ValueList WHERE GroupID = {0} AND Enabled <> 0 AND Hidden = 0", impactKey)) {
            @:impactValues[@valueList.Key] = "@valueList.Text.JavaScriptEncode()";
         }

        function lookupImpactValue(value) {
            return impactValues[value];
        }
    </script>
}