@*******************************************************************************************************
//  Patches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/20/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using openSPM.Models
@model AppModel
@{
    ViewBag.PageControlScripts = new StringBuilder();

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
{   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "PatchReference", "SPM&nbsp;Reference", "text-center" },
        new[] { "ImpactKey", "Impact", "text-center" },
        new[] { "Title", "Title", "text-left" },
        new[] { null, "Patch&nbsp;Status", "text-center valign-middle" },
        new[] { "SourceReleaseDate", "Release&nbsp;Date", "text-center" }
    };

    // See if user has requested to show deleted records
    ViewBag.ShowDeleted = ViewBag.RouteID?.Equals("ShowDeleted", StringComparison.OrdinalIgnoreCase) ?? false;

    if (ViewBag.ShowDeleted) {
        ViewBag.IsDeletedField = Model.DataContext.GetIsDeletedField<Patch>();
    }

    ViewBag.HideAddNewButton = true;
    ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
}
@helper BodyRows()
{
    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "/Images/StatusLights/Small/");

    <td width="5%" class="text-center valign-middle"><img src="@(statusLightsImagePath)greenlight.png" alt="Enabled" data-bind="visible: IsNotCompliance"><img src="@(statusLightsImagePath)disabledlight.png" alt="Disabled" data-bind="visible: !IsNotCompliance"></td>
    <td width="15%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: PatchReference, click: $parent.viewPageRecord"></button></td>
    <td width="15%" class="text-center valign-middle" data-bind="text: lookupImpactValue(ImpactKey)"></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Title, 1.5), attr: {title: Title}"></div></td>
    <td width="10%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm">Start...</button></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: VendorReleaseDate.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog()
{
    DataContext dataContext = Model.DataContext;
    Dictionary<string, string> patchDefaults = dataContext.LoadDatabaseSettings("patch.default");
    int defaultCriticalAlarmDays;
    string setting;

    // Get default critical alarm days
    if (!patchDefaults.TryGetValue("criticalAlarmDays", out setting) || !int.TryParse(setting, out defaultCriticalAlarmDays)) {
        defaultCriticalAlarmDays = 3;
    }

    // Validate default value
    defaultCriticalAlarmDays = Math.Abs(defaultCriticalAlarmDays);

    if (defaultCriticalAlarmDays < 2 || defaultCriticalAlarmDays > 9) {
        defaultCriticalAlarmDays = 3;
    }

    <div class="col-md-4">
        @Html.Raw(dataContext.AddInputField<Patch>("PatchReference", initialFocus: true))
        @Html.Raw(dataContext.AddSelectField<Patch, Patch>("ParentID", "ID", "PatchReference"))
        @Html.Raw(dataContext.AddSelectField<Patch, Vendor>("VendorID", "ID", "Name", "Name"))
        @Html.Raw(dataContext.AddInputField<Patch>("VendorReference"))
        @Html.Raw(dataContext.AddDateField<Patch>("VendorReleaseDate"))
        @Html.Raw(Model.AddValueListSelectField<Patch>("ImpactKey", "impact"))
    </div>
    <div class="col-md-4">
        @Html.Raw(dataContext.AddInputField<Patch>("Title"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Target"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Summary"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Detail", 3))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("Citations"))
    </div>
    <div class="col-md-4">
        @Html.Raw(dataContext.AddTextAreaField<Patch>("WorkArounds"))
        @Html.Raw(dataContext.AddInputField<Patch>("Link", "url"))
        @Html.Raw(dataContext.AddInputField<Patch>("AlarmCriticalDays"))
        @{
            Model.AddPageDefinedFieldInitialization("AlarmCriticalDays",
                /* Initial Value: */ defaultCriticalAlarmDays.ToString(),
                /* RegEx Pattern: */ $"^[{defaultCriticalAlarmDays}-9]+$",
                /* Error Message: */ $"Cannot be less than {defaultCriticalAlarmDays} or greater than 9.");
        }
        @Html.Raw(dataContext.AddInputField<Patch>("SMEGroupID"))
        @Html.Raw(dataContext.AddCheckBoxField<Patch>("IsNotCompliance"))
    </div>
}
@Html.Partial("PagedViewModel")
@section Scripts {
    @Html.Raw(ViewBag.PageControlScripts.ToString())
    <script>
        @Html.Raw(Model.DataContext.RenderViewModelConfiguration<Patch>(ViewBag.ShowDeleted))
        @Html.Raw(Model.RenderValueListClientLookupFunction("impact"))
    </script>
}