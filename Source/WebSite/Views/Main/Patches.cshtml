@*******************************************************************************************************
//  Patches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/20/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF
@using GSF.Web.Model
@using openSPM.Model
@model AppModel
@section StyleSheets {
    @Styles.Render("~/css.bundle/fileinput")
}
@{
    DataContext dataContext = Model.DataContext;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle" },
        new[] { "VendorPatchName", "Patch ID", "text-center" },
        new[] { "Title", "Patch Title", "text-left"},
        new[] { null , "Vendor", "text-left valign-middle" },
        new[] { "VendorReleaseDate", "Release&nbsp;Date", "text-center" },
        new[] { "EvaluationDeadline", "Deadline", "text-center"},
        //new[] { "IsExpedited", "Action", "text-center" },
        new[] { null, "Documents", "text-center valign-middle" }
    };

    
    ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Patch for Assessment";
}
@helper PatchFilter()
{
    <div class='row'>
        <div class='col-md-12'>
            <div class='form-group'>
                <label for='patchfilter'>Patch ID Filter:</label>
                <div class='right-inner-addon'>
                    <i class='glyphicon glyphicon-search'></i>
                    <input class='form-control' type='search' id='patchfilter' placeholder='Search' />
                </div>
            </div>
        </div>
    </div>
}

@helper BodyRows()
{
    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');

    <td width="5%" class="text-center valign-middle"><img src="@(statusLightsImagePath)greenlight.png" alt="Enabled" data-bind="visible: PatchClassKey !== 2"><img src="@(statusLightsImagePath)disabledlight.png" alt="Disabled" data-bind="visible: PatchClassKey === 2"></td>
    <td width="10%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: VendorPatchName, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Title"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupVendorName(VendorID)"></td>
    <td width="20%" class="text-center valign-middle" data-bind="text: VendorReleaseDate.formatDate(DateFormat)"></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: EvaluationDeadline.formatDate(DateFormat)"></td>
    @*<td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-danger btn-sm" data-bind="click: updatePatchStatus.bind($data), visible: !(IsInitiated)">Initiate</button></td>*@
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(ID, $($element)), attr: {id: 'documentCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && !IsDeleted && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    int defaultCriticalAlarmDays;
    string setting;

    // Get default critical alarm days
    if (!Model.Global.ApplicationSettings.TryGetValue("criticalAlarmDays", out setting) || !int.TryParse(setting, out defaultCriticalAlarmDays)) {
        defaultCriticalAlarmDays = 3;
    }

    // Validate default value
    defaultCriticalAlarmDays = Math.Abs(defaultCriticalAlarmDays);

    if (defaultCriticalAlarmDays < 2 || defaultCriticalAlarmDays > 9) {
        defaultCriticalAlarmDays = 3;
    }

    <div class="row">
        <div class="col-md-6">
            @Html.Raw(Model.AddValueListSelectField<Patch>("PatchClassKey", "patchClass"))
            <div data-bind="visible: $parent.recordMode()==RecordMode.Edit || $parent.recordMode()==RecordMode.View ">
                @Html.Raw(dataContext.AddInputField<Patch>("VendorPatchName", fieldLabel: $"{Model.Global.CompanyAcronym} Patch Identifier"))
            </div>
            <div class="form-control" id="vendorName" style="display: none"></div>
            @Html.Raw(dataContext.AddSelectField<Patch, Vendor>("VendorID", "ID", "Name", "Name"))
            @Html.Raw(dataContext.AddDateField<Patch>("VendorReleaseDate"))
            @*<div style="border-style: solid; border-color: red">*@
            @Html.Raw(dataContext.AddDateField<Patch>("EvaluationDeadline"))
            @*</div>*@

            @Html.Raw(Model.AddValueListSelectField<Patch>("ImpactKey", "impact"))
            @*<div data-bind="visible: $parent.recordMode()==RecordMode.View ">*@
                @Html.Raw(dataContext.AddSelectField<Patch, Platform>("PlatformID", "ID", "Name", "Name"))
            @*</div>
            <div data-bind="visible: $parent.recordMode()==RecordMode.Edit || $parent.recordMode()==RecordMode.AddNew ">

                <div class="form-group">
                    <label for="platformIDSelction">Target Product:</label>
                    <select class="form-control" id="platformIDSelction"></select>
                </div>
            </div>*@
        </div>

        <div class="col-md-6">
            @Html.Raw(dataContext.AddInputField<Patch>("Link", "url"))
            @Html.Raw(dataContext.AddTextAreaField<Patch>("Title"))
            @Html.Raw(dataContext.AddTextAreaField<Patch>("Detail", 3))
            @Html.Raw(dataContext.AddTextAreaField<Patch>("Citations"))
            @Html.Raw(dataContext.AddInputField<Patch>("AlarmCriticalDays"))
            @{
                dataContext.AddPageDefinedFieldInitialization("AlarmCriticalDays",
                    /* Initial Value: */ defaultCriticalAlarmDays.ToString(),
                    /* RegEx Pattern: */ $"^[{defaultCriticalAlarmDays}-9]+$",
                    /* Error Message: */ $"Cannot be less than {defaultCriticalAlarmDays} or greater than 9.");
            }
            @Html.Raw(dataContext.AddCheckBoxField<Patch>("IsExpedited"))
        </div>
    </div>
    <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
        <div class="col-md-12">
            <div class="form-group">
                <label for="uploadFiles">Add Patch Related Documents:</label>
                <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
            </div>
        </div>
    </div>
}
@Html.Partial("PagedViewModel")
<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/js.bundle/fileinput")
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<Patch>(ViewBag, "-IsExpedited"))
        @Html.Raw(Model.RenderValueListClientLookupFunction("impact"))
        @Html.Raw(Model.RenderAbstract<Platform>("Name"))
        @Html.Raw(Model.RenderAbstract<Platform>("Version"))
        @Html.Raw(Model.RenderAbstract<Vendor>("Abbreviation", "ID", "lookupVendorName", "VendorName"))
      

        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("Patch", sourceID, null).done(function(count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function() {
            setTimeout(function() {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.ID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame")
                .attr({
                    "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=Patch&SourceField=PatchID&SourceID=" + record.ID + "&Name=" + encodeURIComponent(record.PatchMnemonic),
                    "height": ($(document).height() - 150) + "px",
                    "width": "100%"
                });

            $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function() {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=PatchDocument&SourceField=PatchID"))";
        var selectedFiles;

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            observableRecord.PlatformID = $('#selectPlatformID').val();
            //console.log($('#selectPlatformID').val());
            selectedFiles = $("#uploadFiles").fileinput("getFileStack");
        });

        $(viewModel).on("recordSaved", function(event, record, newRecord) {
            if (newRecord && selectedFiles.length > 0 && viewModel.dataHubIsConnected()) {
                dataHub.getLastPatchID().done(function(patchID) {
                    $("#uploadFiles").fileinput({
                        uploadUrl: fileUploadUrl + "&SourceID=" + patchID.toString(),
                        uploadAsync: true
                    });

                    for (var i = 0; i < selectedFiles.length; i++) {
                        $("#uploadFiles").fileinput("addToStack", selectedFiles[i]);
                    }

                    $("#uploadFiles").fileinput("upload");
                });
            }
            
            if (newRecord && viewModel.dataHubIsConnected()) {
                dataHub.getLastPatchID().done(function(lastPatchID) {
                    dataHub.queryPatchUserAccountPlatformBusinessUnitUserAccountViews(record.PlatformID).done(function(records) {
                        for (var i = 0; i < records.length; i++) {
                            var temp = {
                                "PatchID": lastPatchID,
                                "BusinessUnitID": records[i].BusinessUnitID,
                                "PatchStatusKey": 2
                            };
                            dataHub.addNewPatchStatus(temp);
                        
                        }

                    });
                });

                    
            }
        });

        $(function () {
            $("#pageHeader").append("@Html.Raw(PatchFilter().ToString().RemoveDuplicateWhiteSpace().Replace("\r\n", ""))");
            
            $('#patchfilter').on('keyup', function (e) {
                if ($('#patchfilter').val().length == 0) {
                    viewModel.filterText = '%';
                    viewModel.filterPageRecords();
                } else {
                    viewModel.filterText = $('#patchfilter').val();
                    viewModel.filterPageRecords();

                }

            });

            $("label#inputAlarmCriticalDays").hide();
            $("#inputAlarmCriticalDays").hide();
            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });
           

            $("#addNewEditDialog").on("shown.bs.modal", function() {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#manageDocumentsDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();

                $('#dateVendorReleaseDate').datepicker().on("changeDate", function (e) {
                    $('#dateEvaluationDeadline').datepicker('update', (new Date(new Date().setDate(e.date.getDate() + 35))));
                });


                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12
                });

                //dataHub.queryPlatformsByVendor($('select#selectVendorID').val()).done(function (data) {
                //    $('#selectPlatformID').children().remove();
                //    $.each(data, function (key, val) {
                //        $('#selectPlatformID').append(new Option(val.Name, val.ID));
                //    });
                //}); 

                $('select#selectVendorID').on("change", function(event, handler) {
                    dataHub.queryPlatformsByVendor($('select#selectVendorID').val()).done(function(data) {
                        $('#selectPlatformID').children().remove();
                        $.each(data, function (key, val) {
                            $('#selectPlatformID').append(new Option(val.Name, val.ID));
                            //console.log(val.ID);
                        });
                    }); 
                    
                });
            });

        });
    </script>
}