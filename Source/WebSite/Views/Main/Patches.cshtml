@*******************************************************************************************************
//  Patches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/20/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using openSPM.Models
@model AppModel
@{    
    ViewBag.PageName = "Patch";
    ViewBag.PageControlScripts = new StringBuilder();

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "patchReference", "SPM&nbsp;Reference", "text-center" },
        new[] { "impactIntKey", "Impact", "text-center" },
        new[] { "title", "Title", "text-left" },
        new[] { "dtSource", "Source Date", "text-center" }
    };

    DataContext dataContext = ViewBag.DataContext;
    int impactValuesID = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM ValueListGroup WHERE name='impact' AND enabled <> 0") ?? 0;

    ViewBag.ImpactValuesID = impactValuesID;
    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog().ToString();
}
@helper BodyRows()
{
    <td width="20%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: patchReference, click: $parent.viewPageRecord"></button></td>
    <td width="15%" class="text-center valign-middle" data-bind="text: lookupImpactValue(impactIntKey)"></td>
    <td width="50%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(title, 1.5), attr: {title: title}"></div></td>
    <td width="10%" class="text-center valign-middle" data-bind="text: dtSource.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog()
{
    DataContext dataContext = ViewBag.DataContext;
    RecordRestriction impactValues = new RecordRestriction {
        FilterExpression = "GroupID = {0} AND enabled <> 0 AND private = 0",
        Parameters = new object[] { ViewBag.ImpactValuesID }
    };

    <div class="col-md-4">
        @Html.Raw(dataContext.AddInputField<Patch>("patchReference"))
        @Html.Raw(dataContext.AddSelectField<Patch, Patch>("parentID", "ID", "patchReference"))
        @*@Html.Raw(dataContext.AddSelectField<Patch, Patch>("sourceID", "ID", "SPMidentifier"))*@
        @Html.Raw(dataContext.AddInputField<Patch>("sourceReference"))
        @Html.Raw(dataContext.AddDateField<Patch>("dtSource"))
        @Html.Raw(dataContext.AddSelectField<Patch, ValueList>("impactIntKey", "intKey", "alphaValue", "sortOrder", restriction: impactValues))
    </div>
    <div class="col-md-4">
        @Html.Raw(dataContext.AddInputField<Patch>("title"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("target"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("summary"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("detail", 3))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("reference"))
    </div>
    <div class="col-md-4">
        @Html.Raw(dataContext.AddTextAreaField<Patch>("workArounds"))
        @Html.Raw(dataContext.AddInputField<Patch>("link", "url"))
        @Html.Raw(dataContext.AddInputField<Patch>("alarmCriticalDays"))
        @Html.Raw(dataContext.AddTextAreaField<Patch>("closeOutNotes", 4))
        @Html.Raw(dataContext.AddCheckBoxField<Patch>("isNotCompliance"))
    </div>
}
@Html.Partial("PagedViewModel")
@section Scripts {
    @Html.Raw(ViewBag.PageControlScripts.ToString())
    <script>
        // Configure view model
        viewModel.defaultSortField = "ID";
        viewModel.labelField = "patchReference";
        viewModel.primaryKeyFields = ["ID"];
        viewModel.initialFocusField = "inputpatchReference";

        viewModel.setQueryRecordCount(function() {
            return dataHub.queryPatchCount();
        });

        viewModel.setQueryRecords(function(sortField, ascending, page, pageSize) {
            return dataHub.queryPatches(sortField, ascending, page, pageSize);
        });

        viewModel.setDeleteRecord(function(keyValues) {
            return dataHub.deletePatch(keyValues[0]);
        });

        viewModel.setNewRecord(function() {
            return dataHub.newPatch();
        });

        viewModel.setAddNewRecord(function(record) {
            return dataHub.addNewPatch(record);
        });

        viewModel.setUpdateRecord(function(record) {
            return dataHub.updatePatch(record);
        });

        // Define Javascript based impact value lookup function
        var impactValues = [];

        @foreach (ValueList valueList in dataContext.QueryRecords<ValueList>("SELECT ID FROM ValueList WHERE GroupID = {0} AND enabled <> 0 AND private = 0", impactValuesID)) {
            @:impactValues[@valueList.intKey] = "@valueList.alphaValue.JavaScriptEncode()";
        }

        function lookupImpactValue(value) {
            return impactValues[value];
        }
    </script>
}