@*******************************************************************************************************
//  BusinessUnits.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/29/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF.Web.Model
@using openSPM.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-center" },
        new[] { null, "Coordinator", "text-center" },
        new[] { "Description", "Description", "text-left" },
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Business Unit";
}
@helper BodyRows()
{
    <td width="25%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="30%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: AccountName(), attr: {title: CoordinatorID}, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Description, 2), attr: {title: Description}"></div></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("Name", initialFocus: true))
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("Abbreviation"))
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("CoordinatorID"))
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("BackupCoordinatorID"))
        @Html.Raw(dataContext.AddTextAreaField<BusinessUnit>("Description"))

        <label for="inputNewSME">Add SME to Business Group:</label>
        <div class="input-group">
            <input type="text" class="form-control" data-bind="attr: {'readonly': ($root.recordMode()===RecordMode.View ? true : undefined)}" id="inputNewSME" required>
            <span id="inputNewSMEAdd" class="input-group-addon" data-bind="style: {'cursor': ($root.recordMode()===RecordMode.View ? 'not-allowed' : 'pointer')}"><i class="glyphicon glyphicon-plus"></i></span>
        </div>

        <div id="businessSMEs"></div>
    </div>
}
@Html.Partial("PagedViewModel")
@section Scripts {
    <script>
        "use strict";

        @Html.Raw(Model.RenderViewModelConfiguration<BusinessUnit>(ViewBag))

        // Lookup coordinator account name as store in virutal observable field (for display in table)
        function lookupCoordinatorAccountName(record) {
            if (viewModel.dataHubIsConnected()) {
                securityHub.queryUserAccount(record.CoordinatorID).done(function(userAccount) {
                    securityHub.sidToAccountName(userAccount.Name).done(function(accountName) {
                        record.AccountName(accountName);
                    });
                });
            }
        }

        $(viewModel).on("pageRecordsQueried", function(event, records) {
            // Add a virtual observable field called "AccountName" that will lookup coordinator SID value and resolve it to an account name
            for (var i = 0; i < records.length; i++) {
                records[i].AccountName = ko.observable(records[i].CoordinatorID);
                lookupCoordinatorAccountName(records[i]);
            }
        });

        $(viewModel).on("newRecord", function(event, newRecord) {
            // Make sure new records get virtual field
            newRecord.AccountName = ko.observable("");
        });

        // Before editing record, we want to convert Guid based user account ID's into human readable user names
        $(viewModel).on("beforeEdit", function(event, observableRecord, promises) {
            // Push promises to convert user account IDs to user names before binding current record
            if (viewModel.dataHubIsConnected()) {
                // Add promise to convert coordinator user account ID to a user name
                promises.push($.Deferred(function(deferred) {
                    securityHub.queryUserAccount(observableRecord.CoordinatorID()).done(function(userAccount) {
                        if (userAccount) {
                            securityHub.sidToAccountName(userAccount.Name).done(function(accountName) {
                                observableRecord.CoordinatorID(accountName);
                                deferred.resolve();
                            }).fail(function() {
                                observableRecord.CoordinatorID("");
                                deferred.resolve();
                            });
                        } else {
                            observableRecord.CoordinatorID("");
                            deferred.resolve();
                        }
                    }).fail(function() {
                        observableRecord.CoordinatorID("");
                        deferred.resolve();
                    });
                }).promise());

                // Add promise to convert backup coordinator user account ID to a user name
                promises.push($.Deferred(function(deferred) {
                    securityHub.queryUserAccount(observableRecord.BackupCoordinatorID()).done(function(userAccount) {
                        if (userAccount) {
                            securityHub.sidToAccountName(userAccount.Name).done(function(accountName) {
                                observableRecord.BackupCoordinatorID(accountName);
                                deferred.resolve();
                            }).fail(function() {
                                observableRecord.BackupCoordinatorID("");
                                deferred.resolve();
                            });
                        } else {
                            observableRecord.BackupCoordinatorID("");
                            deferred.resolve();
                        }
                    }).fail(function() {
                        observableRecord.BackupCoordinatorID("");
                        deferred.resolve();
                    });
                }).promise());
            }
        });

        // Before saving record, we want to convert human readable user names back into Guid based user account ID's
        $(viewModel).on("beforeSave", function(event, observableRecord, promises) {
            // Remove virtual observable field before serialization for record updates
            delete observableRecord.AccountName;

            // Push promises to convert user names back to user account IDs before updating record
            if (viewModel.dataHubIsConnected()) {
                // Add promise to convert coordinator user name back to user account ID
                promises.push($.Deferred(function(deferred) {
                    securityHub.userNameToSID(observableRecord.CoordinatorID()).done(function(sid) {
                        securityHub.queryUserAccountByName(sid).done(function(userAccount) {
                            if (userAccount)
                                observableRecord.CoordinatorID(userAccount.ID);
                            else
                                observableRecord.CoordinatorID(null);

                            deferred.resolve();
                        }).fail(function() {
                            observableRecord.CoordinatorID(null);
                            deferred.resolve();
                        });
                    }).fail(function() {
                        observableRecord.CoordinatorID(null);
                        deferred.resolve();
                    });
                }).promise());

                // Add promise to convert backup coordinator user name back to user account ID
                promises.push($.Deferred(function(deferred) {
                    securityHub.userNameToSID(observableRecord.BackupCoordinatorID()).done(function(sid) {
                        securityHub.queryUserAccountByName(sid).done(function(userAccount) {
                            if (userAccount)
                                observableRecord.BackupCoordinatorID(userAccount.ID);
                            else
                                observableRecord.BackupCoordinatorID(null);

                            deferred.resolve();
                        }).fail(function() {
                            observableRecord.BackupCoordinatorID(null);
                            deferred.resolve();
                        });
                    }).fail(function() {
                        observableRecord.BackupCoordinatorID(null);
                        deferred.resolve();
                    });
                }).promise());
            }
        });

        function initializeDynamicLookupField(fieldName, isObservable) {
            if (isObservable === undefined)
                isObservable = false;

            const inputFieldID = "input" + fieldName;
            const inputField = $("#" + inputFieldID);

            // Turn off browser remembered field values
            inputField.attr("autocomplete", "off");

            if (isObservable)
                inputField.wrap("<div class=\"input-group\"></div>");

            // Insert drop-down button after input field
            inputField.after("<span id=\"" + inputFieldID + "ShowAll\" class=\"input-group-addon\" data-bind=\"style: {'cursor': ($root.recordMode()===RecordMode.View ? 'not-allowed' : 'pointer')}\"><i class=\"glyphicon glyphicon-triangle-bottom\"></i></span>");

            const inputFieldDropDown = $("#" + inputFieldID + "ShowAll");

            // Set on-click handler for drop-down button
            inputFieldDropDown.click(function() {
                // Search all records when user clicks drop-down button
                if (viewModel.dataHubIsConnected() && viewModel.recordMode() !== RecordMode.View)
                    inputField.puiautocomplete("search", "");
            });

            // Apply data bindings to newly added drop-down button
            ko.applyBindings(viewModel, inputFieldDropDown[0]);

            inputField.puiautocomplete({
                effect: "fade",
                effectSpeed: "fast",
                forceSelection: true,
                completeSource: function(request, response) {
                    const self = this;

                    if (viewModel.dataHubIsConnected()) {
                        securityHub.searchUserAccounts(request.query).done(function(userAccounts) {
                            response.call(self, userAccounts);

                            // Set z-index of panel to be above pop-up dialog
                            self.panel.css("z-index", $("#addNewEditDialog").css("z-index") + 1);

                            // Auto-size panel to full width of input field area (including input group buttons)
                            setTimeout(function() { self.panel.width(inputField.parent().parent().width()); }, 25);
                        });
                    }
                },
                select: function(event, item) {
                    // Make sure knockout sees any selection - it can't always pickup non-user initiated changes
                    if (isObservable && item)
                        viewModel.currentRecord()[fieldName](item.text());
                }
            });

            // Override jQUery UI display style added by puiautocomplete (messes with bootstrap form-element formatting)
            inputField.parent().css("display", "initial");

            // Get access to autocomplete widget
            //inputField.data("primeui-puiautocomplete").panel.width(inputField.parent().parent().width());
        }

        function initializeBusinessUnitSMETable() {
            const targetRows = 5;

            $("#businessSMEs").puidatatable({
                lazy: true,
                caption: "Business Unit SME's",
                paginator: {
                    rows: targetRows
                },
                columns: [
                    { field: "UserAccountID", headerText: "User Name" },
                    { content: function() { return "<button>Platforms</button>" }, headerText: "SME Platforms" }
                ],
                datasource: function(callback, ui) {
                    const self = this;

                    if (viewModel.dataHubIsConnected()) {
                        dataHub.queryBusinessUnitUserAccounts(viewModel.currentRecord().ID(), notNull(ui.sortField, "UserAccountID"), ui.sortOrder === 1, ui.first / targetRows, targetRows).done(function(businessUnitUserAccounts) {
                            callback.call(self, businessUnitUserAccounts);
                        });
                    }
                }
            });
        }

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function() {
                // Initialize dynamic lookup fields each time modal window is shown
                initializeDynamicLookupField("CoordinatorID", true);
                initializeDynamicLookupField("BackupCoordinatorID", true);
                initializeDynamicLookupField("NewSME");

                // Initialize SME table
                initializeBusinessUnitSMETable();

                // Initialize add new SME button
                $("#inputNewSMEAdd").click(function() {
                    const newSME = $("#inputNewSME").val();

                    if (newSME && newSME.length > 0) {
                        if (viewModel.dataHubIsConnected()) {
                            // Create a new instance of the BusinessUnitUserAccount model
                            dataHub.newBusinessUnitUserAccount().done(function(businessUnitUserAccount) {
                                // Assign current business unit ID
                                businessUnitUserAccount.BusinessUnitID = viewModel.currentRecord().ID();

                                // Convert human readable account name to a security identifier
                                securityHub.userNameToSID(newSME).done(function(sid) {
                                    // Lookup associated user account record for specified SID
                                    securityHub.queryUserAccountByName(sid).done(function(userAccount) {
                                        if (userAccount) {
                                            // Assign user account ID to new BusinessUnitUserAccount model instance
                                            businessUnitUserAccount.UserAccountID = userAccount.ID;

                                            // Add new BusinessUnitUserAccount model instance to database
                                            dataHub.addNewBusinessUnitUserAccount(businessUnitUserAccount).done(function() {
                                                // Refresh the data table
                                                setTimeout(function() { $("#businessSMEs").puidatatable("reload"); }, 50);
                                            });
                                        }
                                    });
                                });
                            });
                        }
                    }
                });
            });
        });
    </script>
}