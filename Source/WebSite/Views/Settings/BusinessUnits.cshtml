@*******************************************************************************************************
//  BusinessUnits.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/29/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF.Web.Model
@using openSPM.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Name", "Name", "text-center" },
        new[] { null, "Coordinator", "text-center" },
        new[] { "Description", "Description", "text-left" },
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Business Unit";
}
@helper BodyRows()
{
    <td width="25%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Name, click: $parent.viewPageRecord"></button></td>
    <td width="30%" class="text-center valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: AccountName(), attr: {title: CoordinatorID}, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement).truncateToWidth(Description, 2), attr: {title: Description}"></div></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("Name", initialFocus: true))
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("Abbreviation"))
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("CoordinatorID"))
        @Html.Raw(dataContext.AddInputField<BusinessUnit>("BackupCoordinatorID"))
        @Html.Raw(dataContext.AddTextAreaField<BusinessUnit>("Description"))

        <label for="inputNewSME">Add SME to Business Unit:</label>
        <div class="input-group">
            <input type="text" class="form-control" data-bind="attr: {'readonly': ($root.recordMode()===RecordMode.View ? true : undefined)}" id="inputNewSME" required>
            <span id="inputNewSMEAdd" class="input-group-addon" data-bind="style: {'cursor': ($root.recordMode()===RecordMode.View ? 'not-allowed' : 'pointer')}"><i class="glyphicon glyphicon-plus"></i></span>
        </div>

        <div id="businessSMEs">
            <div id="loadingbusinessSMEs">
                Loading&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
            </div>            
        </div>
    </div>
}
@Html.Partial("PagedViewModel")
<div id="editSMEPlatformsDialog" class="modal fade" role="dialog">
    <div class="modal-vertical-align-container">
        <div class="modal-dialog modal-md modal-vertical-align-center">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">
                        Edit <span id="editSMEPlatformsUserTitle"></span> Assigned Platforms
                    </h4>
                </div>
                <div class="modal-body auto-height">
                    <form role="form">
                        <div class="col-md-12">
                            <label for="inputNewPlatform">Assign Platform to SME:</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="inputNewPlatform" required>
                                <span id="inputNewPlatformAdd" class="input-group-addon"><i class="glyphicon glyphicon-plus"></i></span>
                            </div>

                            <div id="smePlatforms">
                                <div id="loadingSMEPlatforms">
                                    Loading&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        "use strict";

        @Html.Raw(Model.RenderViewModelConfiguration<BusinessUnit>(ViewBag))

        var currentBusinessUnitUserAccounts = [];
        var selectedBusinessUnitUserAccount = null;

        // Lookup coordinator account name as store in virutal observable field (for display in table)
        function lookupCoordinatorAccountName(record) {
            if (viewModel.dataHubIsConnected()) {
                securityHub.queryUserAccount(record.CoordinatorID).done(function(userAccount) {
                    securityHub.sidToAccountName(userAccount.Name).done(function(accountName) {
                        record.AccountName(accountName);
                    });
                });
            }
        }

        $(viewModel).on("pageRecordsQueried", function(event, records) {
            // Add a virtual observable field called "AccountName" that will lookup coordinator SID value and resolve it to an account name
            for (var i = 0; i < records.length; i++) {
                records[i].AccountName = ko.observable(records[i].CoordinatorID);
                lookupCoordinatorAccountName(records[i]);
            }
        });

        $(viewModel).on("newRecord", function(event, newRecord) {
            // Make sure new records get virtual field
            newRecord.AccountName = ko.observable("");
        });

        // Before editing record, we want to convert Guid based user account ID's into human readable user names
        $(viewModel).on("beforeEdit", function(event, observableRecord, promises) {
            // Push promises to convert user account IDs to user names before binding current record
            if (viewModel.dataHubIsConnected()) {
                // Add promise to convert coordinator user account ID to a user name
                promises.push($.Deferred(function(deferred) {
                    securityHub.queryUserAccount(observableRecord.CoordinatorID()).done(function(userAccount) {
                        if (userAccount) {
                            securityHub.sidToAccountName(userAccount.Name).done(function(accountName) {
                                observableRecord.CoordinatorID(accountName);
                                deferred.resolve();
                            }).fail(function() {
                                observableRecord.CoordinatorID("");
                                deferred.resolve();
                            });
                        } else {
                            observableRecord.CoordinatorID("");
                            deferred.resolve();
                        }
                    }).fail(function() {
                        observableRecord.CoordinatorID("");
                        deferred.resolve();
                    });
                }).promise());

                // Add promise to convert backup coordinator user account ID to a user name
                promises.push($.Deferred(function(deferred) {
                    securityHub.queryUserAccount(observableRecord.BackupCoordinatorID()).done(function(userAccount) {
                        if (userAccount) {
                            securityHub.sidToAccountName(userAccount.Name).done(function(accountName) {
                                observableRecord.BackupCoordinatorID(accountName);
                                deferred.resolve();
                            }).fail(function() {
                                observableRecord.BackupCoordinatorID("");
                                deferred.resolve();
                            });
                        } else {
                            observableRecord.BackupCoordinatorID("");
                            deferred.resolve();
                        }
                    }).fail(function() {
                        observableRecord.BackupCoordinatorID("");
                        deferred.resolve();
                    });
                }).promise());
            }
        });

        // Before saving record, we want to convert human readable user names back into Guid based user account ID's
        $(viewModel).on("beforeSave", function(event, observableRecord, promises) {
            // Remove virtual observable field before serialization for record updates
            delete observableRecord.AccountName;

            // Push promises to convert user names back to user account IDs before updating record
            if (viewModel.dataHubIsConnected()) {
                // Add promise to convert coordinator user name back to user account ID
                promises.push($.Deferred(function(deferred) {
                    securityHub.userNameToSID(observableRecord.CoordinatorID()).done(function(sid) {
                        securityHub.queryUserAccountByName(sid).done(function(userAccount) {
                            if (userAccount)
                                observableRecord.CoordinatorID(userAccount.ID);
                            else
                                observableRecord.CoordinatorID(null);

                            deferred.resolve();
                        }).fail(function() {
                            observableRecord.CoordinatorID(null);
                            deferred.resolve();
                        });
                    }).fail(function() {
                        observableRecord.CoordinatorID(null);
                        deferred.resolve();
                    });
                }).promise());

                // Add promise to convert backup coordinator user name back to user account ID
                promises.push($.Deferred(function(deferred) {
                    securityHub.userNameToSID(observableRecord.BackupCoordinatorID()).done(function(sid) {
                        securityHub.queryUserAccountByName(sid).done(function(userAccount) {
                            if (userAccount)
                                observableRecord.BackupCoordinatorID(userAccount.ID);
                            else
                                observableRecord.BackupCoordinatorID(null);

                            deferred.resolve();
                        }).fail(function() {
                            observableRecord.BackupCoordinatorID(null);
                            deferred.resolve();
                        });
                    }).fail(function() {
                        observableRecord.BackupCoordinatorID(null);
                        deferred.resolve();
                    });
                }).promise());
            }
        });

        function refreshBusinessUnitSMETable() {
            dataHub.queryBusinessUnitUserAccountCount(viewModel.currentRecord().ID()).done(function(count) {
                const businessSMEs = $("#businessSMEs");
                businessSMEs.puidatatable('setTotalRecords', count);
                businessSMEs.puidatatable("getPaginator").puipaginator("setPage", 0);
                //businessSMEs.puidatatable("reload");
            });
        }

        function deleteBusinessUnitSME(userAccountID, userAccountName) {
            if (viewModel.dataHubIsConnected() && confirm("Are you sure you want to remove user '" + userAccountName + "' from '" + viewModel.currentRecord().Name() + "' SMEs?")) {
                dataHub.deleteBusinessUnitUserAccount(viewModel.currentRecord().ID(), userAccountID).done(function() {
                    refreshBusinessUnitSMETable();
                });
            }
        }

        function editBusinessUnitSMEPlatforms(userAccountID) {
            // Lookup user account record from current page of business unit user accounts
            selectedBusinessUnitUserAccount = null;

            for (var i = 0; i < currentBusinessUnitUserAccounts.length; i++) {
                if (currentBusinessUnitUserAccounts[i].UserAccountID === userAccountID) {
                    selectedBusinessUnitUserAccount = currentBusinessUnitUserAccounts[i];
                    break;
                }
            }

            if (selectedBusinessUnitUserAccount == null) {
                alert("Failed to find user account record '" + userAccountID + "' in current page cache.");
            } else {
                $("#editSMEPlatformsUserTitle").text(selectedBusinessUnitUserAccount.UserAccountName);
                $("#editSMEPlatformsDialog").modal("show");
            }
        }

        function initializeBusinessUnitSMETable() {
            const rowsPerPage = 3;

            if (viewModel.dataHubIsConnected()) {
                dataHub.queryBusinessUnitUserAccountCount(viewModel.currentRecord().ID()).done(function(count) {
                    const businessSMEs = $("#businessSMEs");

                    businessSMEs.puidatatable({
                        lazy: true,
                        caption: "Business Unit SME's",
                        paginator: {
                            rows: rowsPerPage,
                            totalRecords: count
                        },
                        columns: [
                            {
                                field: "UserAccountName",
                                headerText: "User Name",
                                bodyStyle: "width: 100%"
                            },
                            {
                                content: function(record) {
                                    return "<button type=\"button\" class=\"btn btn-xs\" onclick=\"editBusinessUnitSMEPlatforms('" + record.UserAccountID + "')\" title=\"Edit '" + record.UserAccountName + "' platforms...\">Platforms</button>";
                                },
                                headerText: "",
                                bodyClass: "text-center",
                                bodyStyle: "width: 110px; padding: 1px"
                            },
                            {
                                content: function(record) {
                                    const userName = record.UserAccountName;
                                    return "<button type=\"button\" class=\"btn btn-xs\" onclick=\"deleteBusinessUnitSME('" + record.UserAccountID + "', '" + userName.replace("\\", "\\\\") + "')\" title=\"Delete '" + userName + "'...\"><span class=\"glyphicon glyphicon-remove\"></span></button>";
                                },
                                headerText: "",
                                bodyStyle: "width: 50px; padding: 1px",
                                bodyClass: "text-center"
                            }
                        ],
                        datasource: function(callback, ui) {
                            const self = this;

                            if (viewModel.dataHubIsConnected()) {
                                dataHub.queryBusinessUnitUserAccounts(viewModel.currentRecord().ID(), ui.sortOrder === 1, Math.floor(ui.first / rowsPerPage) + 1, rowsPerPage).done(function(businessUnitUserAccounts) {
                                    callback.call(self, businessUnitUserAccounts);
                                    currentBusinessUnitUserAccounts = businessUnitUserAccounts;
                                    $("#loadingbusinessSMEs").hide();
                                });
                            }
                        }
                    });

                    businessSMEs.find("table > thead").hide();
                });
            }
        }

        function refreshSMEPlatformsTable() {
            if (viewModel.dataHubIsConnected() && selectedBusinessUnitUserAccount != null) {
                dataHub.queryUserAccountPlatformCount(selectedBusinessUnitUserAccount.UserAccountID).done(function (count) {
                    const smePlatforms = $("#smePlatforms");
                    smePlatforms.puidatatable('setTotalRecords', count);
                    smePlatforms.puidatatable("getPaginator").puipaginator("setPage", 0);
                });
            }
        }

        function deleteSMEPlatform(userAccountID, platformID, platformName) {
            if (viewModel.dataHubIsConnected() && confirm("Are you sure you want to remove platform '" + platformName + "' from '" + selectedBusinessUnitUserAccount.UserAccountName + "'?")) {
                dataHub.deleteUserAccountPlatform(userAccountID, platformID).done(function () {
                    refreshSMEPlatformsTable();
                });
            }
        }

        function initializeSMEPlatformsTable() {
            const rowsPerPage = 3;

            if (viewModel.dataHubIsConnected() && selectedBusinessUnitUserAccount != null) {
                dataHub.queryUserAccountPlatformCount(selectedBusinessUnitUserAccount.UserAccountID).done(function (count) {
                    const smePlatforms = $("#smePlatforms");

                    smePlatforms.puidatatable({
                        lazy: true,
                        caption: "Platforms Assigned to SME",
                        paginator: {
                            rows: rowsPerPage,
                            totalRecords: count
                        },
                        columns: [
                            {
                                field: "PlatformName",
                                headerText: "Platform Name",
                                bodyStyle: "width: 500%"
                            },
                            {
                                field: "VendorName",
                                headerText: "Vendor Name",
                                bodyStyle: "width: 500%"
                            },
                            {
                                content: function (record) {
                                    const platformName = record.PlatformName;
                                    return "<button type=\"button\" class=\"btn btn-xs\" onclick=\"deleteSMEPlatform('" + record.UserAccountID + "', '" + record.PlatformID + "', '" + platformName.replace("\\", "\\\\") + "')\" title=\"Delete '" + platformName + "'...\"><span class=\"glyphicon glyphicon-remove\"></span></button>";
                                },
                                headerText: "",
                                bodyStyle: "width: 50px; padding: 1px",
                                bodyClass: "text-center"
                            }
                        ],
                        datasource: function (callback, ui) {
                            const self = this;

                            if (viewModel.dataHubIsConnected() && selectedBusinessUnitUserAccount != null) {
                                dataHub.queryUserAccountPlatforms(selectedBusinessUnitUserAccount.UserAccountID, notNull(ui.sortField, "PlatformName"), ui.sortOrder === 1, Math.floor(ui.first / rowsPerPage) + 1, rowsPerPage).done(function (userAccountPlatforms) {
                                    callback.call(self, userAccountPlatforms);
                                    $("#loadingSMEPlatforms").hide();
                                });
                            }
                        }
                    });

                    smePlatforms.find("table > thead").hide();
                });
            }
        }

        $(function() {
            var selectedPlatformID;
            var selectedUserAccountID;
            var smePlatformsTableInitialized = false;

            $("#addNewEditDialog").on("shown.bs.modal", function () {
                // Since knockout binding will re-establish state of all bound items when add new/edit dialog is shown,
                // we need to re-initialize auto-complete lookup fields and data table each time the window is shown
                initializeAutoCompleteLookupField("CoordinatorID", securityHub.searchUserAccounts);
                initializeAutoCompleteLookupField("BackupCoordinatorID", securityHub.searchUserAccounts);
                initializeAutoCompleteLookupField("NewSME", securityHub.searchUserAccounts, false);

                // Initialize SME table
                initializeBusinessUnitSMETable();

                $("#inputNewSME").puiautocomplete({
                    select: function (event, item) {
                        selectedUserAccountID = item.data("id");
                    }
                });

                // Initialize add new SME button
                $("#inputNewSMEAdd").click(function() {
                    const newSME = $("#inputNewSME").val();

                    if (newSME && newSME.length > 0) {
                        if (viewModel.dataHubIsConnected()) {
                            // Create a new instance of the BusinessUnitUserAccount model
                            dataHub.newBusinessUnitUserAccount().done(function(businessUnitUserAccount) {
                                // Assign current business unit ID
                                businessUnitUserAccount.BusinessUnitID = viewModel.currentRecord().ID();

                                // Assign user account ID to new BusinessUnitUserAccount model instance
                                businessUnitUserAccount.UserAccountID = selectedUserAccountID;

                                // Add new BusinessUnitUserAccount model instance to database
                                dataHub.addNewBusinessUnitUserAccount(businessUnitUserAccount).done(function() {
                                    // Refresh the data table
                                    refreshBusinessUnitSMETable();
                                    selectedUserAccountID = null;
                                    $("#inputNewSME").val("");
                                });
                            });
                        }
                    }
                });
            });

            // Disallow lost-focus window close on dialog to edit SME platforms
            $("#editSMEPlatformsDialog").modal({ show: false, backdrop: "static", keyboard: false });

            $("#editSMEPlatformsDialog").on("shown.bs.modal", function () {
                selectedPlatformID = null;
                $("#loadingSMEPlatforms").show();

                if (!smePlatformsTableInitialized) {
                    smePlatformsTableInitialized = true;

                    // Initialize a new SME platforms table
                    initializeSMEPlatformsTable();
                }
                else {
                    // After initial table creation, refresh table
                    refreshSMEPlatformsTable();
                }
            });

            $("#editSMEPlatformsDialog").on("hidden.bs.modal", function () {
                // Clear current table contents when dialog is hidden
                if (selectedBusinessUnitUserAccount) {
                    const smePlatforms = $("#smePlatforms");
                    const currentUserAccountID = selectedBusinessUnitUserAccount.UserAccountID;

                    // Temporarily clear current user ID and refresh data table with zero records
                    selectedBusinessUnitUserAccount.UserAccountID = "00000000-0000-0000-0000-000000000000";
                    smePlatforms.puidatatable('setTotalRecords', 0);
                    smePlatforms.puidatatable("getPaginator").puipaginator("setPage", 0);

                    selectedBusinessUnitUserAccount.UserAccountID = currentUserAccountID;
                }
            });

            initializeAutoCompleteLookupField("NewPlatform", dataHub.searchPlatforms, false);

            $("#inputNewPlatform").puiautocomplete({
                select: function (event, item) {
                    selectedPlatformID = parseInt(item.data("id"));
                }
            });

            // Initialize add new SME platform button
            $("#inputNewPlatformAdd").click(function () {
                const newSME = $("#inputNewPlatform").val();

                if (viewModel.dataHubIsConnected() && selectedBusinessUnitUserAccount != null && selectedPlatformID != null) {
                    dataHub.newUserAccountPlatform().done(function (userAccountPlatform) {
                        userAccountPlatform.UserAccountID = selectedBusinessUnitUserAccount.UserAccountID;
                        userAccountPlatform.PlatformID = selectedPlatformID;

                        dataHub.addNewUserAccountPlatform(userAccountPlatform).done(function () {
                            // Refresh the data table
                            refreshSMEPlatformsTable();
                            selectedPlatformID = null;
                            $("#inputNewPlatform").val("");
                        });
                    });
                }
            });
        });
    </script>
}