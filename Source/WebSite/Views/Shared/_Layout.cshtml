@*******************************************************************************************************
//  _Layout.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Linq
@using GSF
@using openSPM.Models
@using Page = openSPM.Models.Page
@model AppModel
@{
    // Lookup page info based on defined page name
    DataContext dataContext = ViewBag.DataContext;
    int pageID = dataContext.Connection.ExecuteScalar<int?>("SELECT ID FROM Page WHERE Name={0} AND Enabled <> 0", ViewBag.PageName ?? "") ?? 0;
    Page page = dataContext.QueryRecord<Page>(pageID);

    // Load layout settings
    Dictionary<string, string> layoutSettings = dataContext.LoadDatabaseSettings("layout.setting");
    string pageTitle, menuImagePath, copyrightText, copyrightUrl, setting;

    bool showCopyright = (layoutSettings.TryGetValue("showCopyright", out setting) && setting.ParseBoolean());

    if (!layoutSettings.TryGetValue("copyrightText", out copyrightText)) {
        copyrightText = "Copyright © 2016, Grid Protection Alliance";
    }

    if (!layoutSettings.TryGetValue("copyrightUrl", out copyrightUrl)) {
        copyrightUrl = "/Main/Contact";
    }

    // Lookup desired menuImagePath for current page
    Dictionary<string, string> serverConfiguration = (page?.ServerConfiguration ?? "").ParseKeyValuePairs();

    // Look for overridden menuImagePath from server configuration string, otherwise use page default
    if (!serverConfiguration.TryGetValue("menuImagePath", out menuImagePath)) {
        if (!layoutSettings.TryGetValue("menuImagePath", out menuImagePath)) {
            menuImagePath = "/Images/Menu/";
        }
    }

    menuImagePath = menuImagePath.EnsureEnd('/');

    // Load menu items for this page from database table
    List<MenuItem> menuItems = dataContext.QueryRecords<MenuItem>("SELECT ID FROM MenuItem WHERE MenuID={0} AND Enabled <> 0 ORDER BY SortOrder", pageID).ToList();
    List<MenuItem> unavailableMenuItems = new List<MenuItem>();

    foreach (MenuItem menuItem in menuItems) {
        // If no menu link was provided, check for page table reference
        if (string.IsNullOrWhiteSpace(menuItem.Link) && menuItem.PageID > 0) {
            // Look-up associated page form menu item
            Page menuPage = dataContext.QueryRecord<Page>(menuItem.PageID);

            // Check if menu item is enabled, page location is specified and that user has rights to page
            if (menuPage != null && menuPage.Enabled && !string.IsNullOrWhiteSpace(page.PageLocation) &&
                !Model.UserIsInRole(menuPage.ExcludedRoles.ToNonNullNorWhiteSpace()) &&
                Model.UserIsInRole(menuPage.IncludedRoles.ToNonNullNorWhiteSpace("*"))) {
                // Update menu item link
                menuItem.Link = page.PageLocation;
            }
            else {
                // Menu item is unavailable to user
                unavailableMenuItems.Add(menuItem);
            }
        }
    }

    // Remove menu items that are not available to user
    foreach (MenuItem menuItem in unavailableMenuItems) {
        menuItems.Remove(menuItem);
    }

    // Define ViewBag.CustomTitle in page code for custom page titles
    if (ViewBag.CustomTitle == null) {
        ViewBag.Title = page?.Title ?? (ViewBag.PageName == null ? "<ViewBag.PageName undefined>" : $"<Page record for \"{ViewBag.PageName}\" does not exist>");
        pageTitle = ViewBag.Title;
    }
    else {
        pageTitle = ViewBag.CustomTitle;
    }

    // Add ViewBag.PageHasMenu = false to page code to disable side-bar menu on page
    bool pageHasMenu = ViewBag.PageHasMenu ?? true;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    @* The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags *@
    <title>@Model.Global.ApplicationName - @pageTitle</title>
    <meta name="application-name" content="@Model.Global.ApplicationName" />
    <meta name="description" content="@Model.Global.ApplicationDescription" />
    <meta name="keywords" content="@Model.Global.ApplicationKeywords" />
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <link href="@Model.Global.BootstrapTheme" rel="stylesheet">
    @if (Model.Global.BootstrapTheme.EndsWith("bootstrap.min.css")) {
    <link href="~/Content/bootstrap-theme.min.css" rel="stylesheet">
    }
    @Styles.Render("~/css.bundle/bootstrap")
    @Styles.Render("~/css.bundle/site")
    @RenderSection("StyleSheets", false)
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <link rel="apple-touch-icon-precomposed" sizes="57x57" href="/Images/Icons/apple-touch-icon-57x57.png" />
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/Images/Icons/apple-touch-icon-114x114.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/Images/Icons/apple-touch-icon-72x72.png" />
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/Images/Icons/apple-touch-icon-144x144.png" />
    <link rel="apple-touch-icon-precomposed" sizes="60x60" href="/Images/Icons/apple-touch-icon-60x60.png" />
    <link rel="apple-touch-icon-precomposed" sizes="120x120" href="/Images/Icons/apple-touch-icon-120x120.png" />
    <link rel="apple-touch-icon-precomposed" sizes="76x76" href="/Images/Icons/apple-touch-icon-76x76.png" />
    <link rel="apple-touch-icon-precomposed" sizes="152x152" href="/Images/Icons/apple-touch-icon-152x152.png" />
    <link rel="icon" type="image/png" href="/Images/Icons/favicon-196x196.png" sizes="196x196" />
    <link rel="icon" type="image/png" href="/Images/Icons/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/png" href="/Images/Icons/favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="/Images/Icons/favicon-16x16.png" sizes="16x16" />
    <link rel="icon" type="image/png" href="/Images/Icons/favicon-128.png" sizes="128x128" />
    <link rel="shortcut icon" href="/Images/Icons/favicon.ico" />
    <meta name="msapplication-TileColor" content="#AABBAA" />
    <meta name="msapplication-TileImage" content="/Images/Icons/mstile-144x144.png" />
    <meta name="msapplication-square70x70logo" content="/Images/Icons/mstile-70x70.png" />
    <meta name="msapplication-square150x150logo" content="/Images/Icons/mstile-150x150.png" />
    <meta name="msapplication-wide310x150logo" content="/Images/Icons/mstile-310x150.png" />
    <meta name="msapplication-square310x310logo" content="/Images/Icons/mstile-310x310.png" />
    @Scripts.Render("~/js.bundle/modernizr")
    <script>
        const DateFormat = "@Model.Global.DateFormat";
        const TimeFormat = "@Model.Global.TimeFormat";
        const DateTimeFormat = "@Model.Global.DateTimeFormat";
    </script>
</head>
<body>
    <!-- #pageWrapper -->
    <div id="pageWrapper"@Html.Raw(pageHasMenu ? "" : " class=\"toggled\"")>
        @if (pageHasMenu) {
            <!-- #sidebarWrapper -->
            <button type="button" class="btn btn-link btn-sm" id="toggleMenuButton" title="Toggle Menu"><span class="glyphicon glyphicon-expand" id="toggleMenuIcon"></span></button>
            <div id="sidebarWrapper">
                <ul class="sidebar-nav">
                    <li class="sidebar-brand" title="@Model.Global.ApplicationDescription">
                        <a href="/" class="navbar-brand" style="margin-top: -5px"><img class="pull-left" style="padding: 12px 10px 10px 20px" alt="@Model.Global.ApplicationName" src="/Images/@(Model.Global.ApplicationName).png"></a>
                    </li>
                    @foreach (MenuItem menuItem in menuItems) {
                        <li><a href="@Html.Raw(menuItem.Link)"><img src="@($"{menuImagePath}{menuItem.Image}")" alt="@menuItem.ImageAlt">@Html.Raw(menuItem.Text)</a></li>
                    }
                </ul>
                <footer id="footer">
                    @if (showCopyright) {
                        <p class="small"><a href="@copyrightUrl">@copyrightText</a></p>
                    }
                </footer>
            </div>
            <!-- /#sidebarWrapper -->
        }
        else {
            <div id="sidebarWrapper" style="display: none"></div>
        }
        <!--#pageContentWrapper -->
        <div class="container theme-showcase" role="main" id="pageContentWrapper">
            <div class="page-header" id="pageHeader">
                <span class="glyphicon glyphicon-refresh pre-cache"></span>
                <span class="glyphicon glyphicon-info-sign pre-cache"></span>
                <span class="glyphicon glyphicon-exclamation-sign pre-cache"></span>
                <div class="alert alert-info fade in" role="alert" id="info-msg-block" style="display: none">
                    <a href="#" class="close" aria-label="close" id="dismissInfoMsg">&times;</a>
                    <span class="glyphicon glyphicon-info-sign" aria-hidden="true"></span>&nbsp;
                    <span class="sr-only">Info</span>
                    <span id="info-msg-text"></span>
                </div>
                <div class="alert alert-danger fade in" role="alert" id="error-msg-block" style="display: none">
                    <a href="#" class="close" aria-label="close" id="dismissErrorMsg">&times;</a>
                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>&nbsp;
                    <span class="sr-only">Error</span>
                    <span id="error-msg-text"></span>
                </div>
                <h3>
                    @pageTitle <small class="pull-right" id="titleText" style="margin-top: 8px"></small>
                </h3>
            </div>
            @* ReSharper disable once PossibleNullReferenceException *@
            <!-- Page Body for @Request.Url.AbsolutePath -->
            @RenderBody()

        </div>
        <!--/#pageContentWrapper -->
    </div>
    <!-- /#pageWrapper -->
    @Scripts.Render("~/js.bundle/jquery")
    @Scripts.Render("~/js.bundle/bootstrap")
    @Scripts.Render("~/js.bundle/signalR")
    @Scripts.Render("~/js.bundle/gsf.web.client")
    @* ReSharper disable once Html.PathError *@
    <script src="/signalr/hubs"></script>
    @Scripts.Render("~/js.bundle/site")
    @RenderSection("Scripts", false)
</body>
</html>
